!% -~S
!% $OMIT_UNUSED_ROUTINES=1
!% $ZCODE_LESS_DICT_DATA=1
!% ++include_path=..\PunyInform\lib

! The very first lines of the main source code file for a game can
! contain compiler options, like the lines above. -~S disables
! strict error checking. This is otherwise used in z5 and z8 games by
! default. While useful for debugging, it adds ~10 KB to the story file
! size and it makes the game slower.
! $OMIT_UNUSED_ROUTINES=1 makes the compiler remove all routines which
! aren't used. This can save some space.
! $ZCODE_LESS_DICT_DATA=1 removes an empty data byte for every dictionary word.

Constant Story      "Strike Force";
Constant Headline   "^The Hydrogen Annihilator^Part 3: Infiltration at the Arctic Circle^^";

! Uncomment ONE of the two following lines, to show either time or score/turns
! Leaving both commented out makes the library bigger.
!Constant STATUSLINE_TIME; Statusline time;
Constant STATUSLINE_SCORE; Statusline score;
 
! Comment out to keep track of score
! The value is what will be shown as the score on statusline in z3
Constant NO_SCORE = 0;

! Customize the statusline in z5+ (has no effect in z3)
!Constant OPTIONAL_SL_NO_SCORE;
Constant OPTIONAL_SL_NO_MOVES;

! Uncomment to add optional features to PunyInform
Constant DEBUG;
!Constant DIALECT_US ! Affects OPTIONAL_ENGLISH_NUMBER
!Constant CUSTOM_ABBREVIATIONS;
Constant CUSTOM_PLAYER_OBJECT = raven;
Constant OPTIONAL_NO_DARKNESS;
!Constant OPTIONAL_FULL_DIRECTIONS;
Constant OPTIONAL_SHIP_DIRECTIONS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
!Constant OPTIONAL_EXTENDED_METAVERBS;
!Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_FLEXIBLE_INVENTORY;
!Constant OPTIONAL_LANGUAGE_NUMBER;
!Constant OPTIONAL_LIST_TOGETHER;
!Constant OPTIONAL_PRINT_SCENERY_CONTENTS;
!Constant OPTIONAL_SCORED;
!Constant OPTIONAL_FULL_SCORE; ! Comment out NO_SCORE when uncommenting this
Constant OPTIONAL_SIMPLE_DOORS;
!Constant OPTIONAL_MANUAL_SCOPE;
!Constant OPTIONAL_MANUAL_REACTIVE;
!Constant OPTIONAL_ORDERED_TIMERS;
Constant OPTIONAL_PROVIDE_UNDO;
!Constant OPTIONAL_REACTIVE_PARSE_NAME;
!Constant RUNTIME_ERRORS = 0; ! 0, 1 or 2. 0 = smallest file, 2 = most info

! Define any library constants you need here, like MAX_SCORE, AMUSING_PROVIDED,
! MAX_CARRIED, SACK_OBJECT,  etc.

Constant DEATH_MENTION_UNDO;
Constant INITIAL_LOCATION_VALUE = Airlock;

Include "globals.h";

! Define your attributes, common properties and global variables here, if any
Attribute shared;
Constant MSG_ASK_DEFAULT 	1000;
Constant MSG_ANSWER_DEFAULT 1001;

[LibraryMessages p_msg p_arg_1 p_arg_2;
	p_arg_1 = p_arg_2;
	switch(p_msg) {
		MSG_ASK_DEFAULT:
			"~Sorry commander, SCN cut out for a moment. Couldn't make that out,~ he says. You hear him tapping his earpiece.";
		MSG_ANSWER_DEFAULT:
			"~Getting static here, commander. Be advised.~";
	}
];

! Define the entry point routines you need here, like Amusing, DarkToDark etc.
[ DeathMessage;
	switch (deadflag) {
		3: print "Klaxons sound and spotlights activate; HAVOC has you in their clutches! You'll be used as bargaining chips by Major Bedlam, at best; subjects to Copperhead's bio-experiments, at worst.";
	}
];

! Uncomment to add PunyLib extensions
!Include "ext_menu.h";
!Include "ext_flags.h";
!Include "ext_talk_menu.h"; ! Note: Also include ext_flags.h to allow use of flags
!Include "ext_quote_box.h";
!Include "ext_cheap_scenery.h";

Include "puny.h";

! Uncomment to add PunyLib extensions
!Include "ext_waittime.h";

[ PressAnyKey k; print "^^[Press any key to continue]"; @read_char 1 -> k; @erase_window 0; return k; ];

[ PreviouslyOn;
	print "Previously on Strike Force...^^With Strike Force commandos distracted by a decoy attack on UN Headquarters, Major Bedlam unleashed HAVOC's most devastating attack yet, destroying the Great Pyramids of Giza with a single blast by a devastating new weapon.^^Soon thereafter, Strike Force suffered another major defeat at the fires of San Cristobal Volcano, failing to stop Medusa from obtaining the rare earth element ~pyritium.~^^In a stroke of good luck, Hexadecimal managed to decode a quantum laptop seized during the firefight giving Strike Force a hopeful new target: a deep sea research laboratory at the Arctic Circle. Now, Raven leads Snowdrift and Fathom on a daring stealth mission to infiltrate the station and obtain evidence of HAVOC's plans.
	^^You are field commander Raven, in direct control of your team. Keep in mind, each operative's field expertise can and will offer a unique perspective on mission objectives. Some tasks may only be performed by a team member with the right experience!^^~sitrep~ for team location/inventory rundown.^~help~ to see relevant information again.^Good luck, commander!
	^^And now, part 3 of ~The Hydrogen Annihilator!~";
	PressAnyKey();
];

[ Introduction;
	print "The sea at the Arctic Circle is black and still, an alien world on earth daring brave souls to explore its depths. Sitting defiantly on the seabed one kilometer below the surface lies a sleak oceanic research facility, a testament to HAVOC's advanced technological achievements. With its domed ~head~ connected to a long corridor ~spine~ with ~ribs~ of multifunction utility modules, it looks for all the world like the skeleton of a vast, forgotten sea creature.^^From deep in the inky distance, three dim, violet spotlights approach the facility.^^";
	print "~Gotta hand it to HAVOC, they're nothing if not adaptable. Even *I've* never seen a place like this in conditions this extreme,~ Fathom says with a whistle.^^~How about you, Snowdrift? Ever see anything like this before?~ you ask.^^~No, I haven't,~ he says, scanning the lab. ~But look there at the fore. That's a WVCA unit for extreme cold regulation.~^^~Something to keep the facility warm?~^^~Could be, but that device is overkill, even in these frigid waters. Related to their research, I'd suspect.~^^~Roger that,~ you acknowledge as you approach the aft airlock. You dismount your propulsion units and attach them to the facility via magnetic tethers.^^You address the team, ~Remember our mission: get in, get evidence, get out. Leave no trace of having been here. HAVOC doesn't know we decrypted their laptop, so let's not blow our advantage. First thing's first: we need to get that airlock open.~";
	PressAnyKey();
];

Object various "(facility various)"
with	name
			'wvca' 'unit' 'dome',
		found_in
			Ocean,
		description
			"From where the team sits at the aft-side airlock door, and in this darkness, that part of the facility is out of sight.",
has scenery;

Object EmptyRoom "Some Empty Room"
with
	description
		"An empty room.",
	s_to
		StartRoom;

Object StartRoom "Start Room"
with
	description
		"The start room.",
	n_to
		EmptyRoom;

Object Ocean "Ocean, Outside the Airlock"
with
	description [;
		print "Outside the airlock door on the aft side of HAVOC's secret research lab in the Arctic Ocean, some 500 fathoms below. Red, green, and white navigation lights twinkle in the inky darkness of the Arctic depths.";
		if (actor ~= player) rfalse; ".";
	],
	n_to
		outer_airlock_door;

Object Airlock "Airlock"
with
	initial[;
		if (self hasnt general) {
			give self general;
			move fathom to self;
			move snowdrift to self;
			update_moved = true;
			give outer_airlock_door ~open;
			"The team moves swiftly into the airlock, sealing the door behind. Yellow lights immediately begin to flash silently as the water drains and chamber pressure is re-established, sure to draw the attention of any sleepless HAVOC personnel!^^Fathom balls up a fist and hovers it over an emergency release button. Everyone tenses up, ready for a quick escape, but luck holds and the procedure finishes without incident. You remove your pressure suits, stash them on available hooks, and set your helmets on the bench.^^~Testing, alpha beta gamma, testing,~ you check the Subvocal Communication Network. Fathom and Snowdrift confirm with a thumbs up.^^
			~Outside of this airlock don't bunch up; only one Striker in any given area at any time. I'll take point and scout ahead. Be ready to act on my orders,~you say.^^In quiet unison the three of you chant, ~Strike hard, strike fast. Strike Force!~^^";
		}
	],
	description [;
		print "The far-aft airlock of HAVOC's research base. Enameled steel benches in battle grey line the portside wall. Hooks with diving suits dress the starboard wall. The inner airlock door leading fore has a porthole which looks out into the base. The outer airlock door is aft";
		if (actor ~= player) rfalse; ".";
	],
	s_to
		outer_airlock_door,
	n_to
		inner_airlock_door;

Object Receiving
with
	short_name
		"Receiving Area",
	description [;
		print "This area seems to be used to stage goods and supplies as they're brought in from the airlock; nothing is currently staged. To port is an open pantry, to starboard is the galley, and fore leads through a short connecting passageway into the next module of the station";
		if (actor ~= player) rfalse; ".";
	],
	s_to
		inner_airlock_door,
	w_to
		Pantry,
	e_to
		Galley,
	n_to
		MessHall;

Object Pantry "Pantry"
with
	description [;
		print "Tidy shelves hold boxes, cans, sacks, and plastic containers of food. Every item is wrapped in a plain, generic, deep blue label with bold, white Helvetica letters.";
		if (actor ~= player) rfalse; ".";
	],
	e_to
		Receiving;

Object foodstuffs "various food stuffs" Pantry
with
	name
		'food' 'box' 'boxes' 'can' 'cans' 'sack' 'sacks' 'plastic' 'container' 'item' 'deep' 'blue' 'label' 'rigatoni',
	description [;
		print "There's a wide variety of food stuffs. A sample box is completely covered in a solid, deep blue with bold, white Helvetica reading ~RIGATONI~. Smaller text gives the total volume and ration size. On the backside in bright yellow is a tastefully small HAVOC logo";
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Object logo "HAVOC logo" Pantry
with
	name
		'logo',
	description [;
		print "Makes one's skin crawl at what, and who, it represents";
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Object Galley "Galley"
with
	description [;
		print "A spotless, compact kitchen in stainless steel with the expected assortment of appliances and utensils. A stand mixer, microwave, and food processor sit on a counter that abuts a walk-in refrigerator along the aft wall. A chef's island holds a spacious wooden cutting board on its steel countertop. A magnetic knife rack with an assortment of blades is mounted above more stainless countertops along the starboard wall. A dishwasher and deep sink are fitted in the aft-starboard corner";
		if (actor ~= player) rfalse; ".";
	],
	w_to
		Receiving;

Object MessHall "Mess Hall"
with
	description[;
		print "This usage of this facility module is split with the starboard third dedicated to the mess hall and the remainder to recreation. The mess hall portion is barebones long tables with utility charis. The recreational area holds couches, chairs, a television, and other leisure items. Judging from dining arrangement, there's 20 or 30 personnel stationed here";
		if (actor ~= player) rfalse; ".";
	],
	s_to
		Receiving;

Object dolphins "D.O.L.P.H.N. units"
with
	name
		'propulsion' 'unit' 'dolphn' 'dolphin',
	article
		"your team's",
	found_in
		Ocean,
	description [;
		if (actor == fathom) {
			print "Aren't they beautiful? It was a real pleasure working with Tidalwave to design that; ain't nobody knows the seas like him. One of my crowing achievements since joining Strike Force. Don't worry, their batteries have more than enough juice to get us to the rendezvous point";
		} else {
			print "Affectionately known as a 'dolphin' (D.O.L.P.H.N. : Deep Oceanic Lifeline and Propulsive Hydro-Navigator), this one-man propulsion unit developed by and for Strike Force, has a tempered glass bullet-dome front with motorcycle-style handles for steering and throttle. It drags the rider through the water much faster than swimming";
			if (actor ~= player) rfalse; ".";
		}
	],
has scenery;

Object magnetic_tether "magnetic tether"
with
	name
		'magnetic' 'tether',
	description [;
		print "These magnetic tethers are the only thing keeping the D.O.L.P.H.N. units from being swept away by cross currents during the mission";
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Object outer_airlock_door "outer airlock door"
with
	name
		'outer' 'airlock' 'door',
	door_dir
		(n_to) (s_to),
	found_in
		Ocean Airlock,
	article
		"the",
	before [;
		Pull, Open:
			if (self has locked) "The handle is in the locked position.";
			if (pressure_gauge.pressure + pressure_gauge.adjustment ~= 0)
				"Though the door is unlocked, the pressure differential between the sea and the inner airlock is too great to open the door.";
			if (self has open) "The airlock door is already open.";
			give self open;
			print "The door swings open, ";
			if (green_wire hasnt general) {
				deadflag = 3;
				"triggering the alarm system!";
			}
			"silently and easily.";
		SimpleUnlock:
			"There's no lever, switch, or keyhole to make the unlocking of the airlock door so trivial. You'll need to bypass its electronic lock somehow.";
	],
	description [;
		if (self has open) {
			print "The airlock door is wide open. ";
		} else {
			print "Tightly fit into the bulkhead, the airlock door is engineered to enough precision to make it difficult to discern where the door ends and the hull of the facility begins. ";
		}
		print "A titanium panel to the left of the door is ";
		if (control_box has open) {
			print "floating in the water, attached to a control box by a ribbon cable";
		} else {
			print "embedded into the steel hull";
		}
		print " and a fist-sized dimple in the door houses a grippable handle";
		if (actor ~= player) rfalse; ".";
	],
has scenery door openable lockable locked;

Object inner_airlock_door "inner airlock door"
with
	name
		'inner' 'airlock' 'door',
	door_dir
		(n_to) (s_to),
	found_in
		Airlock Receiving,
	article
		"the",
	description [;
		if (self has open) {
			print "The inner airlock door is wide open";
		} else {
			print "A bog-standard airlock door with a rotatable handle to unseal and open it into the main facility";
		}
		if (actor ~= player) rfalse; ".";
	],
has scenery door openable lockable;

Object handle "door handle"
with
	name
		'rotatable' 'handle',
	found_in
		Ocean,
	before [;
		Turn:
			if (red_wire.crossed == black_wire) {
				if (outer_airlock_door has locked) {
					give outer_airlock_door ~locked;
					"The handle rotates smoothly. The airlock door should be openable now.";
				} else {
					give outer_airlock_door locked;
					"The handle turns easily, resealing the airlock door.";
				}
			}
			"The handle absolutely refuses to budge.";
	],
	description[;
		print "An oblong handle with a grip sits inset and flush to the door's surface. It looks rotatable";
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Object ResearchFacility "HAVOC Research Facility"
with
	name
		'secret' 'havoc' 'research' 'facility' 'lab',
	found_in
		Ocean,
	description [;
		print "Two large oblong rectangles sit one in front of the other, which is then connected to a long tunnel that runs like the spine of a great beast to a domed ~head~.^^Branching symmetrically off from the ~spine~ are 8 barnacle-encrusted cannisters each the size of a shipping container, forming the ~ribs~ of the HAVOC facility. It sits silently in the dark arctic waters with minimal red and green running lights, and a lone white light above the aft airlock. The team's propulsion units float tethered to the hull.";
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Object bulkhead "bulkhead"
with
	name
		'bulkhead' 'hull',
	article
		"the",
	found_in
		Ocean,
	description [;
		print "Barnacle encrusted but otherwise sound, the stainless steel bulkhead of the facility sits heavily onto the silt of the ocean floor";
		if (control_box has open)
			print ". A small panel has been unscrewed from the main bulkhead and floats, tethered to the facility by a ribbon of rainbow-colored wires.";
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Object control_box "electrical control box"
with
	name
		'titanium' 'access' 'panel' 'electrical' 'control' 'box' 'compartment',
	short_name [;
		if (self has open) {
			print "electrical control box";
		} else {
			print "access panel";
		}
		rtrue;
	],
	article
		"an",
	found_in
		Ocean,
	add_to_scope
		screws,
	before [;
		Tie:
			if (second == bulkhead) <<Screw screws multitool>>;
			"(I know 'guess the verb and grammar' can be hard; try the form ~attach something to something using something~)";
	],
	description [;
		if (self hasnt open) {
			print "A flat square of metal with rounded corners, screwed into the surface of the facility's bulkhead with four stainless steel socket-headed screws";
		} else {
			print "The access panel is floating loose from the bulkhead, attached to the control box by a rainbow-colored ribbon cable. Now open, it reveals a book-sized compartment in the hull of the facility, which houses a small gauge";
		}
		if (actor ~= player) rfalse; ".";
	],
has scenery container openable;

Object multitool "Strike Force multitool"
with
	name
		'tool' 'multitool' 'screwdriver' 'compass' 'knife' 'utility' 'torch' 'soldering' 'lockpick' 'pick' 'data' 'storage' 'usb' 'pen' 'drive',
	before [;
		Give, Drop:
			if (noun == self) "That's one of a Strike Force team members most important tools; every Striker has one and should keep it on their person at all times.";
	],
	description [;
		print "A standard-issue Strike Force multitool for field operations. Can function as a (near) universal screwdriver, compass, utility knife, soldering torch, lockpick, and can store 4 terabytes of data. Functions well in all environments";
		if (actor == fathom)
			print " and got me out of a scrape when a sea cave collapsed on me a few months back"; 
		if (actor == snowdrift)
			print ", even the frozen tundra of Antarctica";
		if (actor == player)
			print ": land, sea, and air";
		if (actor ~= player) rfalse; ".";
	],
has shared;

Object screws "socket-headed screws"
with
	name
		'socket' 'bolt' 'bolts' 'screw' 'screws',
	description [;
		print "Four 5/16~ stainless steel screws with a hexagonal socket in the head";
		if (actor ~= player) rfalse; ".";
	],
	before [;
		Take, Remove, Turn:
			if (actor == player) {
				print "You try ";
			} else {
				print (The)actor, " tries ";
			}
			"valiantly to remove the screws by hand, but it's no use. Those screws are on just too tightly!";
		Screw:
			if (control_box hasnt open) {
				give control_box open;
				if (actor ~= player) {
					print (The)actor, " loosens ";
				} else {
					print "You loosen ";
				}
				"the captive screws with the multitool and the plate comes away from the hull, revealing a control box. The plate floats attached to the box by a ribbon cable.";
			} else {
				give control_box ~open;
				if (actor ~= player) {
					print (The)actor, " tightens ";
				} else {
					print "You tighten ";
				}
				"the captive screws, firmly reattaching the access plate to the control box, leaving no visible sign of any tampering.";
			}
	],
has scenery;

Object ribbon_cable "ribbon cable"
with
	name
		'ribbon' 'cable' 'wires',
	found_in
		control_box,
	before [;
		Take, Remove: "Removing the cable outright would likely trigger a systems failure alarm. HAVOC forces would swarm you in seconds.";
	],
	description [w;
		print "A tidy, flat cable of 13 thick wires each a different color and each with a specialized purpose in controlling the airlock door.";

		if (actor == snowdrift) {
			print " But I don't recognize anything related to my field of expertise. Sorry commander";
		} else {
			if (actor == fathom)
				print "^^~I see wires that maybe trigger an alarm? Don't know much about those. The light/dark pairs over here in pink, turquoise, and so on regulate airlock pressure to allow the door to open. Cutting one would apply its pressure differential as measured by the attached gauge. And by 'cut' I do mean each wire's effects can only be applied once.^^~";

			if (actor == player)
				print "^^You know from experience that when crossed, the red and black wires would unlock the door. Cutting the green wire would disable the security alarm; its a type you've seen before. You have no idea about the other-hued wires.^^";
			print "The current state of the wires:";
			objectloop (w ofclass Wire) {
				print "^    ", (string)w.short_name;
				if (actor == fathom){
					if (w.pressure ~= 0)
						print " (", w.pressure, " bars)";
				}
				if (actor == player){
					if (w.pressure == 0){
						if (w ~= green_wire) {
							print " (lock)";
						} else {
							print " (alarm)";
						}
					}
				}
				print " : ";
				if (w.crossed) {
					print "crossed with ", (the)w.crossed;
				} else if (w has general) {
					print "severed";
				} else {
					print "intact";
				}
			}
		}
		if (actor ~= player) rfalse; "";
	],
has static concealed;

!general means 'cut'
Class Wire
with
	name
		'wire',
	article
		"the",
	pressure !default to 0, where 0 means neutral
		0,
	crossed
		nothing,
	before [;
		Cut:
			if (actor == snowdrift)
				"Snowdrift doesn't have the necessary expertise on these wires that you and Fathom have.";
			if (actor == fathom && 
				self.pressure == 0)
				"~That's probably security-related. I should leave things like that in your capable hands, commander.~";
			if (actor == player && 
				self.pressure ~= 0)
				"Airlock-related wires should be entrusted to that field expert.";
			if (self has general) "That wire is already cut.";
			if (self.crossed ~= nothing) {
				give self.crossed general;
				self.crossed.crossed = nothing;
				self.crossed = nothing;
			}
			give self general;
			print "With the delicate care that comes from world-class operative training, ", (the)self, " wire is snipped cleanly.";
			CalculatePressure();
			"";
	],
	description [;
		print (The)self, " wire ";
		if (actor == fathom) print " which controls ", self.pressure, " bars of pressure";
		print " is currently ";
		if (self has general) {
			print "severed";
		} else {
			if (self.crossed ~= nothing) {
				print "cross-connected to ", (the)self.crossed;
			} else {
				print "intact";
			}
		}
		if (actor ~= player) rfalse; ".";
	],
has scenery;

Wire red_wire "red wire" control_box
with	name 'red',
		short_name "red";

Wire black_wire "black wire" control_box
with	name 'black',
		short_name "black";

Wire green_wire "green wire" control_box
with	name 'green',
		short_name "green";

Wire light_pink_wire "light pink wire" control_box
with	name 'light' 'pink',
		short_name "light pink",
		pressure -5;

Wire dark_pink_wire "dark pink wire" control_box
with	name 'dark' 'pink',
		short_name "dark pink",
		pressure 5;

Wire light_turquoise_wire "light turquoise wire" control_box
with	name 'light' 'turquoise',
		short_name "light turquoise",
		pressure -10;

Wire dark_turquoise_wire  "dark turquoise wire" control_box
with	name 'dark' 'turquoise',
		short_name "dark turquoise",
		pressure 10;

Wire light_orange_wire "light orange wire" control_box
with	name 'light' 'orange',
		short_name "light orange",
		pressure -30;

Wire dark_orange_wire "dark orange wire" control_box
with	name 'dark' 'orange',
		short_name "dark orange",
		pressure 30;

Wire light_purple_wire "light purple wire" control_box
with	name 'light' 'purple',
		short_name "light purple",
		pressure -50;

Wire dark_purple_wire "dark purple wire" control_box
with	name 'dark' 'purple',
		short_name "dark purple",
		pressure 50;

Wire light_grey_wire "light grey wire" control_box
with	name 'light' 'grey',
		short_name "light grey",
		pressure -100;

Wire dark_grey_wire "dark grey wire" control_box
with	name 'dark' 'grey',
		short_name "dark grey",
		pressure 100;

[ CalculatePressure w safe old_adj new_adj;
	old_adj = pressure_gauge.adjustment;
	new_adj = 0;
	safe = true;
	objectloop (w ofclass Wire) {
		if (w.pressure ~= 0) {
			if (w.crossed ~= nothing) {
				safe = false;
				if (pressure_gauge.danger == false) {
					pressure_gauge.danger = true;
				}
			} else if (w has general) {
				new_adj = new_adj + w.pressure;
			}
		}
	}
	pressure_gauge.adjustment = new_adj;
	if (safe) {
		if (pressure_gauge.danger == true) {
			print " The needle settles down into a steady reading again.";
		} else {
			if (old_adj ~= new_adj) {
				print " The needle on the pressure gauge adjusts itself in accordance with the wire manipulation.";
			}
		}
		pressure_gauge.danger = false;
	} else {
		print " The needle on the attached gauge jumps around wildly!";
	}
];

Object pressure_gauge "pressure gauge"
	with
		name
			'pressure' 'gauge',
		pressure
			125,
		adjustment
			0,
		danger
			false,
		found_in
			control_box,
		description [;
			if (actor == fathom) {
				if (self.danger) {
					print "There must be a crossed pressure wire! We've gotta get this sorted out and fast!";
				} else {
					print "That's the airlock sea pressure guage; looks like this vessel is rated for much deeper waters. It currently reads ";
					print (self.pressure + self.adjustment), " bars. ";
					if (self.pressure + self.adjustment == 0) {
						print "The pressure is equalized, so we're safe to use the door now, as long as the lock and security have been bypassed, commander";
					} else {
						print "The airlock door'll be sealed tighter'n a oyster on a pearl 'til it's at zero. Gotta be careful with that pressure or we risk hull breach and this party'll be over before it ever got started";
					}
				}
			} else {
				print "A small, round pressure gauge with demarcations ranging from -500 on the left, to 0 at the top, to +500 on the right. ";
				if (self.danger) {
					print "A small needle which indicates the current pressure is jumping around wildly! Something's very wrong, maybe Fathom knows what's happening";
				} else {
					print "A small red needle currently points to ", (self.pressure + self.adjustment);
					if (self.pressure + self.adjustment == 0) {
						print ". The pressure on the airlock door is equalized";
					}
				}
				if (actor ~= player) rfalse; ".";
			}
		],
has static concealed;

Class Striker
with 	add_to_scope 
			multitool,
has proper animate;

Striker raven "Raven"
with	name
			'self' 'me' 'myself' 'raven' 'commander',
		short_name
			'you',
		add_to_scope
			fathom snowdrift,
		description [;
			print "Strike Force field commander, security and information specialist. An early recruit and founding member of Strike Force. ";
			if (actor == self) {
				print "Black belt in various forms of martial arts and a fine jazz saxophonist, if you do say so yourself";
			} else {
				if (actor == snowdrift) print "Without the commander's good word, I wouldn't have been made a Striker. I owe her my career and trust her with my life";
				if (actor == fathom) print "The commander has saved my hide more than once, and I even saw her defeat Shuriken in hand-to-hand combat training once. ONLY once, but still I'd never seen anyone defeat him before or since";
			}
			if (actor ~= player) rfalse; ".";
		],
		orders [new_room s;
			Go:
				new_room = real_location.selected_direction;
				! print "estimated room: ", (the)new_room, "^";
				if (new_room ofclass String) rfalse;

				new_room = real_location.selected_direction();
				! print "estimated room: ", (the)new_room, "^";
				if (new_room == 0) rfalse;
				
				if (new_room has door) {

					if (new_room hasnt open) {
						if (new_room has locked || new_room hasnt openable)
							rfalse;
						give new_room open;
					}
				
					if (new_room provides door_to) {
						new_room = new_room.door_to();
						if (new_room == 0 or 1)
							rfalse;

					} else if (self in new_room.&found_in-->0) {
						new_room = new_room.&found_in-->1;
					} else {
						new_room = new_room.&found_in-->0;
					}
				}
				
				if (new_room > Directions && new_room <= top_object) {
					! print "estimated room: ", (the)new_room, "^";
					if (new_room ~= Airlock) {
						objectloop (s ofclass Striker) {
							if (parent(s) == new_room) {
								print_ret (The)s, " is in position there at your orders already. Bunching up would increase your odds of being spotted. Move ", (the)s, " to a different location before moving in.";
							}
						}
					}
				}
		],
has female concealed;

Striker fathom "Fathom"
with
	name
		'fathom',
	description [;
		print "Strike Force's deep-sea expert and co-inventor of the D.O.L.P.H.N. units the team used to travel here. ";
		if (actor == self) {
			print "Love to cave-dive and I keep a saltwater aquarium back home. Been with Strike Force some 6 years and counting now";
		} else {
			print "Fearless in his explorations of the briny depths he takes up cave-diving for fun when off duty. We've worked together about ";
			if (actor == snowdrift) print "three ";
			if (actor == player) print "six ";
			print "years now";
		}
		if (actor ~= player) rfalse; ".";
	],
	life [;
		Ask:
			"[Try ~", (the)self, ", examine (the object in question)~]";
		Give:
			move noun to self;
			scope_modified = true;
			print_ret "Fathom accepts ", (the)noun, ".";
	],
	orders [ new_room s;
		Take:
			if (TestScope(noun, self)) {
				move noun to self;
				update_moved = true;
				"Copy that. Acquiring ", (the)noun;
			}
			"Sorry commander, that doesn't seem to be at my location";
		Look:
			print "~";
			parent(self).description();
			print_ret ",~ he says.";

		Examine:
			if (TestScope(noun, self))
				print_ret "~", noun.description(), ",~ he says.";
			"Commander, there is no ", noun, " at my current position.";
		Go:
			print "~";
			new_room = parent(self).selected_direction;
			if(new_room ofclass String)
				print_ret (string) new_room;

			new_room = parent(self).selected_direction();
			if (new_room == 0)
				print "That's a negative. There's no passage ", (name) Directions;
			
			! > This checks if new_room is any kind of valid object at all
			! if(new_room <= Directions || new_room > top_object)
			! 	rtrue;

			! If the room in the desired direction is a door object
			! starting handling the various possible states
			if (new_room has door) {

				! If the door is closed, open it when appropriate
				if (new_room hasnt open) {
					if(new_room has locked || new_room hasnt openable) {
						new_room = 0;
						print "The door won't budge. Awaiting further orders";
					}
					give new_room open;
				}
			
				! Now we have an open door, check where it goes
				! First up, standard door checks
				! (Puny simple doors don't have door_to; see below)
				if (new_room provides door_to) {
					new_room = new_room.door_to();
					if (new_room == 0)
						print "That door doesn't seem to lead anywhere";
					! door_to() may have finished handling things and sent the "all done" signal. Respect that.
					if (new_room == 1)
						rtrue;

				! Puny simple doors are found_in an array of ONLY 2 items
				! As we're in one of those two, our destination is the other one
				} else if (self in new_room.&found_in-->0) {
					new_room = new_room.&found_in-->1;
				} else {
					new_room = new_room.&found_in-->0;
				}
			}
			
			! Now that we have an actual room, move our character there
			if (new_room > Directions && new_room <= top_object) {
				if (new_room ~= Airlock) {
					objectloop (s ofclass Striker) {
						if (parent(s) == new_room) {
							print "Commander, ";
							if (s == raven) {
								print "you are ";
							} else {
								print (the)s, " is ";
							}
							print_ret "positioned in ", (the)new_room, " already. Joining there would violate mission orders,~ he says.";
						}
					}
				}
				move self to new_room;
				update_moved = true;
				print "Heading ", (name) Directions, " to ", (the)new_room;
			}
			print ",~ he says";
			if (new_room == real_location)
				print " and joins you in here a brief moment later";
			".";
		Give:
			if (second has animate) {
				if (noun has shared) {
					"~Looks like they remembered to bring one along, as ordered. Everything looks good, commander.~";
				}
				if (parent(noun) ~= self)
					"Sorry commander, I don't have that on my person.~";
				if (TestScope(self, noun)) {
					move noun to second;
					scope_modified = true;
					"Roger that,~ he says, handing over ", (the)noun, ".";
				}
				"I don't see one of those anywhere near my location, commander.~";
			} else {
				"He squirrels up his face in confusion, ~Give the what to who now?~";
			}
		Open:
			<<Open noun second>>;
		Cut:
			<<Cut noun>>;
		Solder:
			<<Solder noun second>>;
		default:
			"~That's probably better off being entrusted to your or Snowdrift's skills, commander.~";
	],
has talkable;

Striker snowdrift "Snowdrift"
	with
		name
			'snowdrift',
		add_to_scope 
			multitool,
		description [;
			print "Strike Force's Arctic specialist, expert on all things ice and snow. ";
			if (actor == self) {
				print "Might sound strange, but in my freetime I enjoy getting away on a quiet beach and am an avid reader. I Joined Strike Force 3 years ago; anniversary is actually this Friday";
			} else if (actor == fathom) {
				print "It's kind of rare to combine our fields of expertise, like on this mission. We've worked together about three years now";
			} else {
				print "You personally recommended he be allowed to join Strike Force seeing in him the intrepid spirit that drives all Strikers in the fight against HAVOC";
			}
			if (actor ~= player) rfalse; ".";
		],
		life [ ;
			Ask:
				"[Try ~", (the)self, ", examine (the object in question)~]";
			Give:
				move noun to self;
				update_moved = true;
				"Snowdrift takes ", (the)noun, " into his possession with a crisp nod of affirmation.";
		],
		orders [ new_room s;
			Take:
				if (TestScope(noun, self)) {
					move noun to self;
					update_moved = true;
					"~Copy that. Acquiring ", (the)noun, ",~ he confirms.";
				} else {
					"~Sorry commander, that doesn't seem to be at my location,~ he says.";
				}
			Go:
				print "~";
				new_room = parent(self).selected_direction;
				if(new_room ofclass String)
					print_ret (string) new_room;

				new_room = parent(self).selected_direction();
				if (new_room == 0)
					print "That's a negative. There's no passage ", (name) Directions;
				
				! > top_object means an id greater than the largest id of all game objects, meaning invalid.
				! if(new_room <= Directions || new_room > top_object)
				! 	rtrue;

				! If the room in the desired direction is a door object
				! starting handling the various possible states
				if (new_room has door) {

					! If the door is closed, open it when appropriate
					if (new_room hasnt open) {
						if(new_room has locked || new_room hasnt openable) {
							new_room = 0;
							print "The door won't budge. Awaiting further orders";
						}
						give new_room open;
					}
				
					! Now we have an open door, check where it goes
					! First up, standard door checks
					! (Puny simple doors don't have door_to; see below)
					if (new_room provides door_to) {
						new_room = new_room.door_to();
						if (new_room == 0)
							print "That door doesn't seem to lead anywhere. Odd";
						! door_to() may have finished handling things and sent the "all done" signal. Respect that.
						if (new_room == 1)
							rtrue;

					! Puny simple doors are found_in an array of ONLY 2 items
					! As we're in one of those two, our destination is the other one
					} else if (self in new_room.&found_in-->0) {
						new_room = new_room.&found_in-->1;
					} else {
						new_room = new_room.&found_in-->0;
					}
				}
				
				! Now that we have an actual room, move our character there
				if (new_room > Directions && new_room <= top_object) {
					if (new_room ~= Airlock) {
						objectloop (s ofclass Striker) {
							if (parent(s) == new_room) {
								print "Commander, ";
								if (s == raven) {
									print "you are ";
								} else {
									print (the)s, " is ";
								}
								print_ret "positioned in ", (the)new_room, " already. Joining there would violate mission orders,~ he says.";
							}
						}
					}
					move self to new_room;
					update_moved = true;
					print "Heading ", (name) Directions, " to ", (the)new_room;
				}
				print ",~ says ",(the) self, ".^";
				if (new_room == real_location) 
					print "^", (The)self, " joins you in ", (the)new_room, ".";
				rtrue;
			Look:
				print "~";
				parent(self).description();
				print_ret ",~ he says.";
			Examine: 
				print "~";
				noun.description();
				print_ret ",~ he says.";
			Cut:
				<<Cut noun>>;
			Give:
				if (second has animate) {
					if (noun has shared) {
						"~Looks like they remembered to bring one along, as ordered. We're good to go, commander.~";
					}
					if (parent(noun) ~= self)
						"Sorry commander, I don't have that on my person.~";
					if (TestScope(self, noun)) {
						move noun to second;
						scope_modified = true;
						"Roger that,~ he says, handing over ", (the)noun, ".";
					}
					"I don't see one of those anywhere near my location, commander,~ he notes.";
				} else {
					"He squirrels up his face in confusion, ~Give the what to who now?~";
				}
			default:
				"~Having *me* do that may endanger the mission, commander. You or Fathom are better suited to the task.~";
		],
has talkable;

[ SimpleUnlockSub;
	"HAVOC has been known to make very dumb mistakes before, but in general their security is tight enough to prevent such simple unlocking to work.";
];

Extend 'unlock'
	* noun -> SimpleUnlock;

[ ScrewSub;
	if (second ~= multitool) {
		if (actor == player) {
			print "You use every skill in your considerable training to ";
		} else {
			print (the)actor, " tries valiantly to ";
		}
		"to manipulate ", (the) noun, " with ", (the) second, " but it's just not possible without the assistance of a tool.";
	}
];

Extend 'turn'
	* noun 'with'/'using' noun -> Screw;
Extend 'remove' last
	* noun 'with'/'using' noun -> Screw;
Verb 'replace' 'loosen' 'tighten'
	* noun 'with'/'using' noun -> Screw;

[ AttachClarifySub;
	"The multitool has many functions. You'll need to be more specific about which part of the tool you want to use to attach those together.";
];

[ AttachSub;
	if (noun ofclass Wire && second ofclass Wire) {
		<<Solder noun second>>;
	}
	"There's no clear way to attach ", (the)noun, " to ", (the)second, ".";
];

Verb 'connect' = 'attach';
Verb 'reattach' = 'attach';
Extend 'attach' last
	* noun 'to' noun 'with'/'using'/'by' 'tool'/'multitool' -> AttachClarify
	* noun 'to' noun 'with'/'using'/'by' 'torch' -> Attach
	* noun 'to' noun 'with'/'using'/'by' 'soldering' 'multitool'/'tool'/'iron'/'torch' -> Attach;

[ SolderSub; 
	if (TestScope(multitool, actor) == false)
		"That's not going to be possible without a multitool handy. It's standard-issue Striker equipment for a reason!";
	if (~~(noun ofclass Wire) || ~~(second ofclass Wire))
		"The soldering component of the multitool is really only strong enough for light tasks, like reconnecting wires.";
	if ((noun hasnt general) || (second hasnt general))
		"Only cut wires can be soldered together.";
	if (noun == second) {
		give noun ~general;
		noun.crossed = nothing;
		print (The)noun, " is fused back into one wire.";
		CalculatePressure();
		"";
	}
	if (noun ~= second) {
		noun.crossed = second;
		second.crossed = noun;
		give noun ~general;
		give second ~general;
		print (The)noun, " and ", (the)second, " are now cross-fused.";
		CalculatePressure();
		"";
	}
	"UNEXPECTED: Some edge case fell through to here!";
];

Verb 'solder' 'fuse'
	* noun 'to'/'and'/'with' noun -> Solder
	* noun 'to'/'and'/'with' noun 'with'/'using'/'by' 'torch'/'tool'/'soldering'/'multitool' -> Solder
	* noun 'to'/'and'/'with' noun 'with'/'using'/'by' 'soldering' 'multitool'/'tool'/'torch'/'iron' -> Solder
	* noun 'with'/'using'/'by' 'torch'/'tool'/'multitool' 'to' noun -> Solder
	* noun 'with'/'using'/'by' 'soldering' 'iron'/'tool'/'torch'/'multitool' 'to' noun -> Solder;

[ DirectionPromptSub;
	"Something at the research facility is causing your compass to behave erratically. You'll need to use nautical terms while on this mission: fore (f), aft (a), port (p), and starboard (sb).";
];

Verb 'n//' 'north' 's//' 'south' 'e//' 'east' 'w//' 'west' 'nw' 'northwest' 'ne' 'northeast' 'sw' 'southwest' 'se' 'southeast'
	* -> DirectionPrompt;

[ UseExplainSub;
	"Being a member of the elite Strike Force, precision of words is as important as precision of actions. (try to come up with a more specific verb to apply to the situation)";
];

Verb 'use' 'utilize'
	* noun -> UseExplain
	* noun 'on'/'with' noun -> UseExplain;

Verb 'describe' = 'examine';

[ SitRepSub s o;
	objectloop (s ofclass Striker) {
		objectloop (o has shared)
			move o to s;
		update_moved = true;
		if (s == player) {
			print "You are ";
		} else {
			print (The)s, " is ";
		}
		print "at ", (the)parent(s), "^";
		PrintContents("Carrying ", s, NEWLINE_BIT);
		print "- - - - -^";
	}
	objectloop (o has shared)
		move o to player;
	update_moved = true;
	rtrue;
];

Verb 'sitrep'
	* -> SitRep;

[ HelpSub;
	print "Remember, each team member has a unique field of expertise and may have new insights on places and items.^^As field commander, you control Fathom and Snowdrift directly:^";
	print "      fathom, go starboard^";
	print "      snowdrift, examine the box^^";
	print "For a summary of team member locations and inventory items:^";
	print "      sitrep^^";
	print "If you're stumped on verb/grammar, re-read relevant item descriptions. Ex: for a soldering iron try ~solder~^";
	print "      solder (item) to (another item)^";
	rtrue;
];

Verb 'help'
	* -> Help;

[Initialise o;
	ship_directions_enabled = true;
	normal_directions_enabled = false;

	objectloop (o has shared)
		move o to player;
	move fathom to location;
	move snowdrift to location;
	update_moved = true;
	
	! PreviouslyOn();
	! Introduction();
];