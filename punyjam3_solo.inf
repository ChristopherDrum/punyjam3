!% -~S
!% $OMIT_UNUSED_ROUTINES=1
!% $ZCODE_LESS_DICT_DATA=1
!% ++include_path=..\PunyInform\lib

! The very first lines of the main source code file for a game can
! contain compiler options, like the lines above. -~S disables
! strict error checking. This is otherwise used in z5 and z8 games by
! default. While useful for debugging, it adds ~10 KB to the story file
! size and it makes the game slower.
! $OMIT_UNUSED_ROUTINES=1 makes the compiler remove all routines which
! aren't used. This can save some space.
! $ZCODE_LESS_DICT_DATA=1 removes an empty data byte for every dictionary word.

Constant Story      "Strike Force";
Constant Headline   "^The Hydrogen Annihilator^Part 3: Infiltration at the Arctic Circle^^";

! Uncomment ONE of the two following lines, to show either time or score/turns
! Leaving both commented out makes the library bigger.
!Constant STATUSLINE_TIME; Statusline time;
Constant STATUSLINE_SCORE; Statusline score;
 
! Comment out to keep track of score
! The value is what will be shown as the score on statusline in z3
Constant NO_SCORE = 0;

! Customize the statusline in z5+ (has no effect in z3)
Constant OPTIONAL_SL_NO_SCORE;
Constant OPTIONAL_SL_NO_MOVES;

! Uncomment to add optional features to PunyInform
Constant DEBUG;

!Constant DIALECT_US ! Affects OPTIONAL_ENGLISH_NUMBER
!Constant CUSTOM_ABBREVIATIONS;
Constant CUSTOM_PLAYER_OBJECT = raven;
Constant OPTIONAL_NO_DARKNESS;
! Constant OPTIONAL_FULL_DIRECTIONS;
Constant OPTIONAL_SHIP_DIRECTIONS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
Constant OPTIONAL_EXTENDED_METAVERBS;
Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_FLEXIBLE_INVENTORY;
!Constant OPTIONAL_LANGUAGE_NUMBER;
!Constant OPTIONAL_LIST_TOGETHER;
Constant OPTIONAL_PRINT_SCENERY_CONTENTS;
!Constant OPTIONAL_SCORED;
!Constant OPTIONAL_FULL_SCORE; ! Comment out NO_SCORE when uncommenting this
Constant OPTIONAL_SIMPLE_DOORS;
!Constant OPTIONAL_MANUAL_SCOPE;
!Constant OPTIONAL_MANUAL_REACTIVE;
!Constant OPTIONAL_ORDERED_TIMERS;
Constant OPTIONAL_PROVIDE_UNDO;
!Constant OPTIONAL_REACTIVE_PARSE_NAME;
!Constant RUNTIME_ERRORS = 0; ! 0, 1 or 2. 0 = smallest file, 2 = most info

! Define any library constants you need here, like MAX_SCORE, AMUSING_PROVIDED,
! MAX_CARRIED, SACK_OBJECT,  etc.

Constant DEATH_MENTION_UNDO;
Constant INITIAL_LOCATION_VALUE = Ocean;

Include "globals.h";

! Define your attributes, common properties and global variables here, if any

Include "sf_messages.h";

Attribute shared;
Attribute small;
Attribute removable;

Constant BASE_UNIT_TEMPERATURE	-200;
Constant FAILSAFE_TEMPERATURE	-190;
Constant TEMPERATURE_ADJUST		2;
Constant FAILED_CRYSTAL_STAGE 	3;


[ italic text;
#IfV5;
	style underline;
#Endif;
	print (string)text;
#IfV5;
	style roman;
#Endif;
];

[ PressAnyKey k; print "^^[Press any key to continue]"; @read_char 1 -> k; @erase_window 0; return k; ];

! Define the entry point routines you need here, like Amusing, DarkToDark etc.


! Uncomment to add PunyLib extensions
!Include "ext_menu.h";
!Include "ext_flags.h";
!Include "ext_talk_menu.h"; ! Note: Also include ext_flags.h to allow use of flags
!Include "ext_quote_box.h";
!Include "ext_cheap_scenery.h";

Include "puny.h";

! Uncomment to add PunyLib extensions
!Include "ext_waittime.h";

[ PreviouslyOn;
	print "Strike hard. Strike fast! STRIKE FORCE!^^
	Strike Force is a multinational team of special mission operatives based in international waters. They serve to protect the world from HAVOC, a relentless force for evil and chaos.^^When the world faces an insurmountable problem, Strike Force is the solution!^^^^";print (italic)"Previously on Strike Force...^^";
	print "Master Bedlam unleashed HAVOC's most terrifying weapon yet, an instantaneous energy beam which destroyed the Great Pyramids of Giza!^^While the world is held at ransom, Strike Force learns of a secret HAVOC research laboratory deep in the Arctic Ocean. Major Vanguard sends Raven and Snowdrift on a midnight mission to infiltrate the station and obtain evidence of HAVOC's plans.
	^^And now, part 3 of ~The Hydrogen Annihilator!~";
	PressAnyKey();
];

[ Introduction;
	print "The ocean at the Arctic Circle is black and still, an alien world on earth daring humanity to explore its depths. Sitting defiantly on the seabed one kilometer down lies a HAVOC research station, its evil presence a blight in the pristine waters.^^Two dim, violet spotlights emerge from the inky darkness.^^";
	print "~Gotta hand it to HAVOC, they're nothing if not adaptable,~ Raven says as she survey's the station on approach.^^~Yeah, vermin typically are,~ quips Snowdrift. ~Commander, look there at the fore dome. That's a WVCA generator for temperature regulation.~^^~Something to keep the fascists warm?~^^Snowdrift clucks his tongue, ~That would be overkill, even in these waters. More likely they're experimenting with near-zero materials.~^^~Then you were definitely the right choice for the mission,~ she affirms. Arriving at the aft airlock they dismount their propulsion units, tether them to the facility, and get to work.";
	PressAnyKey();
];

[ RavenCheck ok w;
	ok = 	((access_panel hasnt general) && 
			(outer_airlock_door has ~open));
	objectloop (w ofclass Wire) {
		ok = ok && (w hasnt general) && (w.crossed == nothing);
	}
	return ok; 
];

[ SnowblindCheck ok;
	ok = 
		((stepladder.next_to == workbench) &&
		(gloves in equipment_storage) &&
		(tongs in equipment_storage) &&
		(equipment_storage has locked));
	return ok;
];

[ Coda rok sok;
	@erase_window 0;
	deadflag = 2;

	print "Raven and Snowdrift mount their respective D.O.L.P.H.N. units and beat a speedy retreat. With stealth and care, the vial containing the Ice-X sample is retrieved and they speed off toward their exfiltration point, swiftly disappearing into the dark, arctic waters.";
	rok = RavenCheck();
	sok = SnowblindCheck();

	if (~~rok) {
		deadflag = 6;
		print "^^Raven mutters to herself, ~Why do I have this nagging feeling I've forgotten something?~";
		if (~~sok) {
			print "^^Snowblind grows silent, ~Yeah, I do too.~";
		}
	} else if (~~sok) {
		deadflag = 6;
		print "^^Snowblind breaks the silence, ~Commander, I can't help but think I forgot something back at the research lab.~";
	}

	if (deadflag == 6) {
		print "^^Raven sighs, ~If any mistakes were made, there's nothing we can do about it now. We got what we came for, so hopefully that's enough to push things in our favor.^^~Hopefully,~ she whipsers without conviction.";
	}

	print "^^^";
	print (italic)"On the next episode of Strike Force!^";
	if (deadflag == 2) {
		print "Having gained an important tactical advantage with their flawless raid on the arctic research station, Strike Force pushes back against HAVOC's plans as Master Bedlam looks to harvest a rare gaseous compound at the top of Mount Everest. Tune in tomorrow for part 4 ~Summit of Doom!~";

	} else {
		print "Having quickly detected the infiltration of their arctic base, HAVOC gains the upper hand, swiftly bringing the world to its knees, holding The Great Wall of China ransom for $100 billion. Tune in tomorrow for the series finale, ~The Destruction of Strike Force!~";
	}
];

Object various "(facility various)"
with	name
			'wvca' 'generator' 'ribs',
		found_in
			Ocean,
		description
			"From where the team sits at the aft-side airlock door, and in this darkness, that part of the facility is out of sight.",
has scenery;

Object Ocean "Ocean, Outside the Airlock"
with
	initial [;
		print (italic)"[You now control Raven, field commander and security expert.]^";
		if (toilet hasnt general) {
			"You turn to Snowdrift, ~OK, remember our mission: get in, get evidence, get out. Leave no trace we were here.~^^Snowdrift asks, ~What kind of evidence, commander?~^^~Remains to be seen. HAVOC has a penchant for the dramatic, so I suspect you'll know it when you see it. First thing's first: I need to get that airlock door open for you.~^";
		}
	],
	description [;
		print "You're outside HAVOC's secret research base in the Arctic Ocean, some 500 fathoms below. Navigation lights decorate the facility, dimly illuminating the surrounding darkness. ";
		if (outer_airlock_door has open)
			"To fore, the facility's aft airlock door stands open.";
		"The airlock door to fore is closed.";
	],
	in_to
		outer_airlock_door,
	n_to
		outer_airlock_door;

Object ocean_scenery "ocean scenery" Ocean
with
	name
		'ocean' 'sea' 'depths' 'water',
	description
		"Vast and unknowable. The still waters seem unusually devoid of marine life in the area immediately around the station. Either HAVOC's research is repelling the fish, or even sea creatures understand instinctively that HAVOC is best avoided.",
	react_before [;
		Listen:
			"The sound of your own breathing drowns out any other sounds that might be happening. Through the in-helmet intercom system, Snowdrift's breathing can faintly be heard.";
	],
has scenery;

Object Airlock "Airlock"
with
	initial[;
		if (self hasnt general) {
			give self general;
			move snowdrift to self;
			move fake_raven to self;
			remove raven;
			remove fake_snowdrift;
			player = snowdrift;
			move multitool to snowdrift;
			update_moved = true;
			give outer_airlock_door ~open;
			print "You and Snowdrift move swiftly into the airlock, sealing the door behind. As chamber pressure is re-established, yellow lights flash silently, sure to draw attention to your presence!^^You hover a fist over an emergency release button, ready to punch it. However, your luck holds and the procedure finishes without incident. You quickly stash your pressure suits on available hooks.^^
			~OK, Snowdrift, you're up. If two of us sneak around we double our chance of being caught, so you'll have to go it alone. Once you rendezvous with me here we leave; no second chances,~ you say.^^In quiet unison you chant, ~Strike hard. Strike fast. Strike Force.~^^";
			print_ret (italic)"[You now control Snowdrift, arctic specialist and expert in all things ice and snow.]^";
		}

		if (toilet has general) {
			move raven to Ocean;
			move fake_snowdrift to Ocean;
			remove fake_raven;
			remove snowdrift;
			player = raven;
			move multitool to raven;
			update_moved = true;
			give outer_airlock_door open;
			print "You slip back into the airlock, ~Mission accomplished, commander. Recommend a hasty retreat.~^^Raven nods in agreement, ~Good work, soldier. I knew it was a wise bet bringing you along. Let's get out of here.~^^The two of you hurredly redon your pressure gear, flood the airlock, and exit back out into the ocean and your waiting D.O.L.P.H.N. units.^^";
		} else {
			deadflag = 7;
		}
	],
	description
		"The far-aft airlock of HAVOC's research base. Enameled steel benches in battle grey line the portside wall. Hooks with pressure suits dress the starboard wall. The inner airlock door leading fore has a porthole which looks out into the base. The outer airlock door is aft.",
	out_to
		outer_airlock_door,
	s_to
		outer_airlock_door,
	in_to
		inner_airlock_door,
	n_to
		inner_airlock_door;

Object emergency_release "emergency release button" Airlock
with
	name
		'emergency' 'release' 'button',
	description
		"A red mushroom-shaped button under a clear plexiglass hinged cover. Punch it and explosive bolts on the airlock door will blow, providing an emergency escape in the case of dire emergency.",
	before [;
		Push, SwitchOn, SwitchOff:
			"~Hopefully we won't need to use that,~ Raven notes, ~But it's good field instinct that you're assessing our options.~";
	],
has scenery;

Object pressure_suits "pressure suits" Airlock
with
	name
		'havoc' 'hook' 'hooks' 'pressure' 'suit' 'suits',
	description
		"Two sleek, flexible Strike Force pressure suits, designed by yourself and Fathom for the temperature and pressures of the Arctic Ocean, hang on hooks next to HAVOC suits of a clunkier, more menacing, design.",
has scenery;

Object benches "benches" Airlock
with
	name
		'battle' 'grey' 'enameled' 'steel' 'bench' 'benches',
	description
		"A no-nonsense place for sitting down.",
	before [;
		Enter:
			move player to self;
			update_moved = true;
			"You sit down next to Raven, steeling yourself up for the mission.";
	],
	react_before [;
		Exit:
			if (player in self) {
				move player to Airlock;
				update_moved = true;
				"You stand up with renewed vigor to disrupt HAVOC's plans.";
			} else {
				if (verb_word == 'stand')
					"You're standing at your full height already.";
			}
	],
has pluralname scenery supporter;

Object airlock_porthole "inner airlock porthole" Airlock
with
	name
		'window' 'porthole',
	description
		"A small window that looks into the base proper straight through to a few rooms away. There's nothing of note to see, and more importantly NOBODY to see. The coast is clear.",
has scenery;

Object Receiving
with
	short_name
		"Receiving Area",
	description [;
		if (self hasnt general) {
			give self general;
			print "You take a quiet, cautious step out of the airlock and into the research base proper. Raven gives you a silent thumbs up.^^";
		}
		"This area seems to be used to stage supplies as they're brought in from the airlock; nothing is currently staged. To port is an open pantry, to starboard is the galley, and fore leads through a short connecting passageway into the next module of the station.";
	],
	s_to [;
		if (toilet hasnt general)
			"Rendezvousing with the commander in the airlock without having collected any evidence will immediately end your mission in total failure. Everyone's counting on you, soldier!";
		return inner_airlock_door;
	],
	w_to
		Pantry,
	e_to
		Galley,
	n_to
		MessHall;

Object Pantry "Pantry"
with
	description
		"Tidy shelves hold boxes, cans, sacks, and plastic containers of food. Every item is wrapped in a deep blue label with bold, white lettering.",
	e_to
		Receiving;

Object foodstuffs "various foodstuffs" Pantry
with
	name
		'shelves' 'food' 'box' 'boxes' 'can' 'cans' 'sack' 'sacks' 'plastic' 'container' 'blue' 'label' 'rigatoni' 'foodstuffs' 'stuff' 'stuffs',
	description 
		"There's a wide variety to stave off culinary boredom. One sample box is a solid, deep blue with bold, white Helvetica ~RIGATONI~. Smaller text gives the total volume and ration size. On the backside in bright yellow is a tastefully restrained HAVOC logo.",
	before [;
		Eat:
			"It contains a chemical agent developed by Dr. Yellowjacket which renders HAVOC food poisonous to anyone not innoculated. HAVOC agents receive monthly shots to protect against this.";
	],
has edible pluralname static;

Object logo "HAVOC logo" Pantry
with
	name
		'logo',
	description 
		"Makes one's skin crawl at what, and who, it represents.",
has scenery;

Object Galley "Galley"
with
	description
		"A spotless, compact kitchen in stainless steel with the expected assortment of appliances and utensils.",
	before [;
		Smell:
			"Aside from the saltwater and general close-quarters funk, they seem to have had fresh bread for dinner.";
	],
	w_to
		Receiving;

Object appliances "appliances" Galley
with
	name
		'assorted' 'appliances' 'utensils' 'compact' 'kitchen' 'stand' 'mixer' 'dough' 'paddle' 'microwave' 'magnetic' 'knife' 'block' 'chefs' 'knives' 'knife' 'food' 'processor',
	description
		"A stand mixer with the dough paddle installed, a microwave oven big enough to hold a large chicken, a magnetic knife block with a variety of basic chef's knives, and a food processor. A walk-in refrigerator is inset into the aft wall.",
	before [;
		Receive:
			"You make a mental note to take basic cooking lessons from Flavortown when you get back to home base.";
		SwitchOn, SwitchOff:
			"That would make entirely too much noise and blow the mission.";
	],
has static pluralname container open concealed;

Object refrigerator "walk-in refrigerator" Galley
with
	pickability
		3,
	name
		'walk-in' 'fridge' 'refrigerator' 'freezer' 'lock',
	description
		"A walk-in refrigerator/freezer is built into the aft wall. You know this model isn't rated for temperatures that explain the presence of the WVAC unit you saw when approaching the station. The mystery of HAVOC's research surely lies further afore.",
	before [;
		Open, Close, Enter:
			"The facility's research won't be discovered inside a restaurant-grade refrigerator. You're definitely looking for something much, much colder.";
	],
has static lockable locked concealed;

Object MessHall "Mess Hall"
with
	description
		"This shared-use module is split with one third dedicated to a mess hall and the remainder to recreation. The mess hall portion is bare-bones with long tables and folding chairs.^^The recreational area holds couches, plush chairs, a television, and other leisure items.^^From here you can continue deeper into the facility to fore, or return aft back to the receiving area and airlock.",
	n_to
		CorridorC,
	s_to
		Receiving;

Object television_logo "HAVOC logo" MessHall
with
	name
		'havoc' 'logo',
	description
		"It looks like the television's original ~Magnetbox~ logo was scratched off and covered with HAVOC's bright yellow logo.",
has scenery;

Object recreational_scenery "recreational furniture" MessHall
with
	name
		'recreational' 'furniture' 'flat' 'screen' 'television' 'tv' 'couch' 'couches' 'plush' 'chairs' 'chair',
	description
		"Even the bad guys need to relax sometimes. Plush couches and chairs are clad in identical dark blue fabric, arranged to face a state-of-the-art 36~ television branded with the HAVOC logo.",
	before [;
		Enter, Exit:
			"Lounging around in enemy territory puts not just your and the commander's lives at risk, but potentially the whole world if this mission isn't successful!";
		SwitchOff, SwitchOn:
			"The noise that would make would end your mission here and now.";
		Receive:
			"Many an agent has blown an undercover mission by forgetting to retrieve something left out in the open. Field Operations Manual rule 19 exists for a reason!";
	],
has switchable scenery supporter enterable;

Object leisure_items "leisure items" MessHall
with
	name
		'leisure' 'items' 'board' 'games' 'deck' 'cards' 'sente' '5200' 'game' 'machine',
	description
		"A selection of board games, decks of cards, and the latest Sente 5200 game machine.",
has scenery;

Object dining_scenery "dining furniture" MessHall
with
	name
		'dining' 'furniture' 'steel' 'folding' 'chair' 'chairs' 'long' 'table' 'tables',
	description
		"Two long tables aligned parallel in aft-fore rows form a bare-bones dining area. Steel folding chairs are arranged along both tables. 24 people are stationed here, if the chair count is any indication.",
	before [;
		Enter, Exit:
			"They look uninviting at best, a waste of your limited time here at worst.";
		Receive:
			"Many an agent has blown an undercover mission by forgetting to retrieve something left out in the open. Field Operations Manual rule 19 exists for a reason!";
	],
has scenery supporter enterable;

Object CorridorC "Corridor, Aft Module"
with
	description
		"Cramped and submarine-like, this is part of the main corridor that forms the ~spine~ of the facility. Exits lie fore and aft, and doors lie to port and starboard.",
	n_to
		CorridorB,
	s_to
		MessHall,
	e_to [;
		if (starboard_door_c hasnt general)
			<<Examine starboard_door_c>>;
		deadflag = 4;
		"Against your better judgment you slip into the barracks as quietly as possible. From behind, a throat clears to get your attention. It seems a restless soldier was standing just out of sight from the porthole window.";
	],
	w_to [;
		if (port_door_c hasnt general)
			<<Examine port_door_c>>;
		deadflag = 4;
		"Against your better judgment you slip into the barracks as quietly as possible. From behind, a throat clears to get your attention. It seems a restless soldier was standing just out of sight from the porthole window.";
	];

Object port_door_c "port door" CorridorC
with
	name
		'port' 'door' 'porthole' 'p//',
	description [;
		give port_door_c general;
		"Exercising an abundance of caution, you steal a glance through the porthole in the door to see what lies beyond. A dozen or so HAVOC personnel are barracked here. Best not to enter the hornet's nest.";
	],
	before [;
		Open:
			<<Go FAKE_W_OBJ>>;
	],
has openable scenery;

Object starboard_door_c "starboard door" CorridorC
with
	name
		'starboard' 'door' 'porthole' 'sb',
	description [;
		give starboard_door_c general;
		"You peek through the porthole window in the door. Inside are barracks, and maybe a dozen HAVOC personnel sleeping.";
	],
	before [;
		Open:
			<<Go FAKE_E_OBJ>>;
	],
has scenery openable;

Object CorridorB "Corridor, Central Module"
with
	description
		"The central module's spacious, futuristic design is sandwiched between the industrial, cramped modules at aft and fore. Passageways lead into rooms to port and starboard.",
	before [;
		Search:
			"Embedded into the portal that connects this command module with the aft barracks is a series of evenly spaced, pale blue lights.";
	],
	n_to
		CorridorA,
	s_to [;
		if (parent(vial) == actor) {
			if (self hasnt general) {
				give self general;
				if (sensor_array hasnt general) {
					"Just as you're about to cross through, your Strike Force intuition kicks in. Something feels off.";
				} else {
					"Just as you're about to continue through, you recall the sensor array you inspected earlier. Is it safe to take lab materials across the threshold?";
				}
			} else {
				deadflag = 5;
				print "You choose to risk it, judging that you ";
				if (sensor_array hasnt general) {
					print "are just being paranoid. ";
				} else {
					print "have mis-identified the purpose of the blue lights. ";
				}
				print "But the lesson of second-guessing yourself in the field is quickly learned as the klaxon blares the instant you cross the portal threshold";
				if (sensor_array has general)
					print " with the vial";
				".";
			}
		}
		return CorridorC;
	],
	w_to 
		Security,
	e_to
		Operations;

Object sensor_array "LX sensor array" CorridorB
with
	name
		'pale' 'blue' 'light' 'lights' 'lx' 'sensor' 'array',
	description [;
		give self general;
		"Commander Raven knows systems like this better, but it might be an LX array. These detect when microchipped materials cross their threshold. Given the design incongruity and security features, it was likely intended to be connected directly to the foremost dome unit as an anti-theft measure.";
	],
	before [;
		Sabotage:
			"The sensor array is embedded deep inside the portal frame, under a thick layer of glass. It is impossible to see how or where to even begin to disable the array.";
	],
has scenery;

Object corridor
with
	name
		'corridor' 'hall' 'hallway' 'passage' 'portal' 'frame' 'passageway',
	found_in
		CorridorC CorridorB CorridorA,
	before [;
		Examine:
			if (real_location == CorridorB)
				<<Search real_location>>;
			<<Examine real_location>>;
		Search:
			<<Search real_location>>;
	],
has scenery;

Object Security "Security Module"
with
	description
		"A high-tech bank of switches, knobs, lights, and monitors fills the port-side half of the aft wall, and a rack of firearms fills the rest. You find yourself wishing Commander Raven were here to make sense of this equipment. The only exit is starboard, back to the main corridor.",
	e_to
		CorridorB;

Object security_decorations "security decorations" Security
with
	name
		'switch' 'switches' 'light' 'lights' 'monitor' 'monitors' 'bank' 'knob' 'knobs',
	description
		"You're just a scientist, not a security expert. Raven or Deadbolt would know what all of this does.",
	before [;
		SwitchOn, SwitchOff:
			"Touching those without understanding them would trigger an alarm for sure.";
	],
has switchable scenery;

Object weapon_decorations "weapon decorations" Security
with
	name
		'firearms' 'firearm' 'weapon' 'weapons' 'aps' 'rifle' 'rifles' '.45' 'pistol' 'pistols' 'ammo' 'clips' 'clip' 'harpoon' 'gun' 'guns' 'arsenal',
	description
		"Like any fascist organization worth their salt, HAVOC is nothing if not paranoid. Even a couple of dozen scientists buried 1km under the sea are heavily armed. APS underwater assault rifles, .45 calibre pistols, ammo clips, and a couple of harpoon guns round out the arsenal.",
	react_before [;
		Shoot:
			"Discharging a weapon would be an incredibly foolish thing to do, as much as you want to destroy this facility and everything it stands for.";
	],
	before [;
		Take:
			"HAVOC is known to take full stock of all weapons and ammunition every morning before rollcall. A single item out of place would draw instant suspicion.";
	],
has scenery;

Object Operations "Communications and Operations Module"
with
	description
		"Tucked back into the starboard-most end of the module are pipes with gauges and valves, probably used to stabilize facility pressure as oceanic conditions shift.^^Closer to the port-side door is a communications module molded directly into the wall and floor. The only way out is where you came in, to port.",
	w_to
		CorridorB;

Object communications_decorations "communications decorations" Operations
with
	name
		'communications' 'module',
	description [;
		if (Lab has visited) {
			print "A modern, sleek, almost mod design, matching what you saw in the main research lab. ";
		} else {
			print "Incongruously modern compared to what you've seen of the facility so far. HAVOC probably stole this tech from someone else. ";
		}
		"The communications array has a sonar, a radio headset plugged into one of a bank of 1/4~ jacks, an array of tuning knobs, a desk-mounted microphone, and more.";
	],
	before [;
		SwitchOn, SwitchOff:
			"Turning on/off such equipment would force a reset which would be noticed in the morning.";
	],
has switchable scenery;

Object sonar "sonar" Operations
with
	name
		'sonar',
	description
		"The sonar shows nothing on screen, which means the stealth coating Strike Force technicians brewed up for your D.O.L.P.H.N units works as advertised."
has scenery;

Object operations_decorations "operations decorations" Operations
with
	name
		'pipe' 'pipes' 'gauge' 'gauges' 'valve' 'valves',
	description
		"If Fathom were here, he'd know what these are for. They look like they require deep sea expertise to utilize without flooding the whole place inadvertently",
	before [;
		Turn:
			"Manipulating these without understanding them could flood the entire operation. Strike Force would lose two top operatives, plus they'd still be in the dark about HAVOC's plans.";
	],
has scenery;
	

Object CorridorA "Corridor, Fore Module"
with
	initial [;
		if (self hasnt general) {
			give self general;
			"You've almost completely searched the entire facility and so far it has been extraordinarily dull with nothing worthy of Strike Force's attention. Did we receive bad intel? Are we searching in the wrong place?^";
		}
	],
	description
		"The same industrial, cramped construction as you saw at the barracks module. The primary dome module sits just fore. Swinging doors lie port and starboard. Aft will return to the central security and operations module.",
	n_to
		Lab,
	s_to
		CorridorB,
	w_to 
		Showers,
	e_to
		Latrine;

Object port_door_a "port door" CorridorA
with
	name
		'swinging' 'door' 'port' 'p//',
	description
		"A stainless steel swinging door with a porthole that looks into a shower area.",
	before [;
		Open:
			<<Go FAKE_W_OBJ>>;
	],
has openable scenery;

Object starboard_door_a "starboard door" CorridorA
with
	name
		'swinging' 'door' 'starboard' 'sb',
	description
		"A stainless steel swinging door with a porthole that looks into the latrine.",
	before [;
		Open:
			<<Go FAKE_E_OBJ>>;
	],
has scenery openable;

Object Showers "Showers"
with
	description
		"A partitionless shower setup clad in stainless steel with showerheads along the aft wall, sinks with mirrors along the fore wall. Personal toiletries are stashed at the sinks, toothbrushes, razors, and the like. The floor is covered in a rubber mat with drainage holes.",
	e_to
		CorridorA;

Object shower_decorations "shower decorations" Showers
with
	name
		'showerhead' 'sink' 'mirror' 'toiletries' 'toothbrush' 'razor' 'razors' 'shower' 'drainage' 'hole' 'holes' 'rubber' 'mat' 'floor' 'flooring' 'accoutrements',
	description
		"A quick scan of the shower accoutrements reveals nothing to help with the mission, and taking anything from here could raise suspicions when HAVOC personnel awaken.",
	before [;
		SwitchOn, SwitchOff:
			"A running shower would draw the curiousity of anyone headed for the latrine.";
	],
has switchable scenery;

Object Latrine "Latrine"
with
	latrine_fail [;
		StopDaemon(self);
		deadflag = 5;
		"A startled HAVOC soldier locks eyes with you and drops the reading material he was carrying. Then suddenly screams, ~CODE BLACK! STRIKER ON BASE! REPEAT, STRIKER ON BASE, CODE BLACK!~";
	],
	initial [;
		if (Latrine.safe_to_exit == false)
			self.latrine_fail();
	],
	description [;
		if (player notin stall) {
			print "A few stainless steel sinks with personal mirrors, standing urinals in stainless steel, and similarly uninviting stalls occupy the borders of the latrine. A moderately-sized porthole window on the starboard wall offers a view outside.";
			if (self hasnt visited)
				print "^^Faint movement in the water just outside the porthole catches your attention.";
			"";
		}
	],
	final_sequence
		0,
	safe_to_exit
		true,
	daemon [;
		self.final_sequence = self.final_sequence + 1;
		self.safe_to_exit = true;
		switch (self.final_sequence) {
			1:
				self.safe_to_exit = false;
				"Suddenly, the door to the latrine slams open!";
			2:
				self.safe_to_exit = false;
				"Rushed, heavy footsteps approach the stalls.";
			3:
				self.safe_to_exit = false;
				print "You see bare feet aligned with your stall. Hasn't he noticed it's occupied?^";
				if (stall_door has open) {
					print "^With the stall door wide open, your cover is blown.^^";
					self.latrine_fail();
				}
			4:
				if (stall_door hasnt locked) {
					print "The door to your stall is flung wide open! He begins to apologize, ~Oh, sorry, I didn't notice you were...~^^";
					self.latrine_fail();
				} else {
					self.safe_to_exit = false;
					"The door is momentarily jolted by a sudden tug, then a low voice mumbles, ~Ah, sorry.~";
				}
			5:
				self.safe_to_exit = false;
				"The stall door next to you is jiggled and cajoled. It's apparently stuck, ~This...stupid...thing...~";
			6:	
				"The neighboring door finally relents, opening and shutting with a bang. You hear the lock being hurredly fidgeted into place.";
			7:
				"A stack of HAVOC training manuals and other reading material are dropped to the floor by his feet.";
			8:
				"The occupied stall is quiet, then trousers fall to the floor around the occupant's ankles.";
			9:
				"The occupant yelps in sudden shock. ~Are heated toilet seats out of budget?~ he mutters to himself.";
			10:
				"You hear a quiet sigh of relief.";
			default:
				switch (random(4)) {
					1: "You hear humming coming from the occupied stall.";
					2: "You hear the pages of reading material being flipped through.";
					3: "He drops what he was reading and picks up a different item from his stack.";
					4: "Just silence from the occupied stall.";
				}
		}
	],
	in_to
		stall_door,
	w_to [;
		if (self.final_sequence > 0) {
			StopDaemon(self);
			self.final_sequence = 0;
			self.safe_to_exit = true;
		}
		return CorridorA;
	];

Object latrine_window "latrine window" Latrine
with
	name
		'movement' 'latrine' 'starboard' 'porthole' 'window' 'outside' 'water' 'ocean',
	description [;
		print "Navigation lights along the starboard side of the facility illuminate the immediate surroundings near the latrine window.";
		if (toilet has general) {
			"^^You can see the specimen vial settling into the silt of the ocean bed. It should be easy to retrieve once you're back in the water.";
		}
		if (self hasnt general) {
			give self general;
			"^^In the green light you see a cloud of murky water dissipating and...Oh no, you wish you hadn't seen that. HAVOC is using the ocean as their personal septic tank. Is there any place on earth they haven't defiled with their presence?";
		}
		" You see nothing but still waters.";
	],
has scenery;

Object latrine_decorations "latrine decorations" Latrine
with
	name
		'stainless' 'steel' 'urinal' 'urinals' 'mirror' 'mirrors' 'sink' 'sinks',
	description
		"Utilitarian, industrial, easy to clean with a hose and a bucket of soapy water.",
has scenery;

Object stall_door "stall door"
with
	pickability
		0,
	name
		'stall' 'steel' 'door' 'stalls' 'lock',
	door_dir
		(in_to) (out_to),
	found_in
		Latrine stall,
	with_key
		nothing,
	description [;
		if (real_location == Latrine) {
			"Three unoccupied stalls sit close to the starboard wall, each behind a closed, stainless steel door.";
		} else {
			"A little cramped, but otherwise a pretty basic stall with a toilet.";
		}
	],
	before [;
		SimpleLock:
			give self locked;
			"The sliding lock latches closed with a click.";
		SimpleUnlock:
			give self ~locked;
			"The sliding lock retracts smoothly.";
		Open:
			if (Latrine.safe_to_exit == false)
				Latrine.latrine_fail();
	],
has scenery door openable lockable;

Object stall "Latrine (in the stall)"
with
	initial
		"You choose the starboard-most stall and enter.^",
	description [;
		<<Examine stall_door>>;
	],
	out_to
		stall_door;

Object toilet "toilet" stall
with
	name
		'toilet' 'commode',
	capacity
		1,
	description [;
		print "Stainless steel, utilitarian, looks cold. Appears to operate on a vacuum flush mechanism.";
		if (latrine_window has general)
			print " If what you saw outside the porthole window is any indication, it flushes directly out to the ocean.";
		""; 
	],
	react_before [;
		Go:
			if (selected_direction == u_to)
				<<Exit self>>;
			if (selected_direction == d_to)
				<<Enter self>>;
		Exit:
			if (player in self) {
				move player to stall;
				update_moved = true;
				"You gladly get up off the toilet.";
			} else {
				if (verb_word == 'stand')
					"You're standing at your full height already.";
			}
	],
	before [;
		Enter:
			move player to self;
			update_moved = true;
			"With great reluctance, you sit on the cold stall.";
		Receive:
			if (noun hasnt small)
				"That would only clog and overflow the toilet.";
			if ((noun == vial) && (child(vial) == nothing))
				"The vial is small enough to fit, but the mission purpose for putting it in the toilet is unclear. Maybe there will be a reason to flush it later?";
		Flush:
			print "The toilet evacuates with a vacuum flush";
			if (child(self) ~= nothing) {
				print " draining ", (the)child(self), " away";
				if (child(self) == vial) {
					move ice to containment_unit;
					give self general;
					StartDaemon(Latrine);
				}
				remove child(self);
				update_moved = true;
			}
			". BA-WOOSH!";
	],
has static container openable concealed;

Object Lab "Main Research Laboratory"
with
	description [;
		if (self hasnt general) {
			give self general;
			"You make your way into the primary domed unit of the facility, the research laboratory. The commander wasn't joking about HAVOC's tendancy toward the dramatic.^^
			A bright orange floor rises in concentric half-circle steps up to the elevated fore. A deep, bright white workbench runs 180 degrees from port to starboard around the forward section of the lab, molded directly into the walls and ceiling. It is partitioned into separate workspaces, each devoted to a different scientific discipline.^^
			The steps encircle, and the room is designed around, a proud display of the prize at dead center: an immense glass cylinder that runs floor to ceiling, filled with a dense mass of shimmering blue crystals. They are charged with an internal energy, and give off refracted, alien light that prisms about the room. Combined with the mod stylings of the interior, you can't help but feel transported to an otherworldly discotheque.^^
			Seeing the crystals and feeling their energy in proximity, you realize they've done the impossible. HAVOC has successfully developed Ice-X!";
		}
		"A perfectly round room designed around a central core which holds a glass cylinder filled with blue crystals of Ice-X. The aft half of the room has a supply cabinet. Concentric half-circle steps lead up to the fore which sports a 180 degree wraparound workbench divided into smaller workstations.";
	],
	s_to
		CorridorA;

Object otherworldly_decoration "otherworldly decoration" Lab
with
	name
		'light' 'prism' 'refracted' 'alien' 'discotheque',
	description
		"The energy and lights are mesmerizing. It would be so easy to lose yourself in their hypnotic appeal.",
has scenery;

Object workbench "laboratory workbench"
with
	name
		'lab' 'workstation' 'primary' 'main' 'workbench' 'console' 'bench' '180' 'wraparound' 'degree',
	description [;
		print "The workbench is molded directly into the outer wall and floor as one piece and holds an array of scientific tools. You recognize most of the tools from your research with hyperice; there's nothing particularly unique about them.^^Next to the port end of the workbench ";
		if (stepladder.next_to == workbench) {
			print "sits a rolling stepladder. ";
		} else {
			print "is an area designated for stepladder storage, outlined on the floor in yellow tape. ";
		}
		"At the starboard end is a cryoflux inducer, an exciting piece of highly advanced cryogenic technology.";
	],
	article
		"the",
	found_in
		Lab,
has static;

Object lab_scenery "lab scenery" Lab
with
	name
		'scientific' 'tools',
	description
		"Typical research equipment for working with ice structures, both natural and man-made. You have much of this equipment back at Strike Force headquarters; it's nothing remarkable on its own.",
		react_before [;
		Listen: 
			if (noun == nothing or self)
				"The dull hum of the WVCA unit keeping the central core cold, mixed with the faint crackle of electrical arcs. Then, just on the edge of hearing, you swear you hear the tinkling of very fine glass.";
		Smell: 
			if (noun == nothing or self)
				"A light whiff of ozone, as from an electrically charged atmosphere. Unlike the rest of the facility, there is no discernable smell of brine or the inhabitants.";
	],
has scenery;

Object cryoflux "cryoflux inducer" Lab
with
	name
		'large' 'piece' 'technology' 'cryoflux' 'inducer',
	description
		"If only you could get this machine out of HAVOC's lab and into your own! There are theoretical ice structures that an inducer could coax out of even basic H20. Although the ~theoretical~ seems to have been made real here, judging from the central containment unit's contents.",
	before [;
		Take:
			"Oh how you wish! Even if you could move 500kg covertly through the base without being caught, its absence would be a cause for immediate alarm in the morning.";
		SwitchOn, SwitchOff:
			"There is no simple on/off switch for a machine this advanced. It would require intimate knowledge of its workings to activate its elaborate power cycling routine.";
	],
has switchable static;

Object containment_base "metallic base" Lab
with
	name
		'thick' 'tapered' 'dense' 'electronic' 'aluminum' 'metallic' 'base',
	description
		"A 1/2m thick aluminum base filled with a bewildering array of lights dials, levers, switches, readouts, and more which seem to monitor and control the unit's health. The wide base tapers inward to meet the circumference of the enormous glass cylinder it supports. One large button stands out.",
	invent
		"an aluminum base dense with electronics, on which sits a glass cylinder filled with blue crystals",
has supporter transparent static;

Object containment_unit "large glass containment unit" containment_base
with
	name
		'central' 'core' 'enormous' 'immense' 'large' 'glass' 'cylinder' 'containment' 'unit',
	add_to_scope
		ice,
	temperature
		BASE_UNIT_TEMPERATURE,
	capacity
		1,
	description
		"It dominates the center of the room, mounted on an aluminum base, at some 2m in diameter and the entire 10m dome height connecting to the ceiling. It is filled with a dense mass of blue, shimmering, jewel-like crystals. A small access hatch with a warning label is built into the glass, just a bit out of reach. Mounted to the ceiling is a large green, monochrome display.",
	before [;
		Open, Close, Lock, Unlock:
			"The only potential way into the cylinder seems to be through its access hatch.";
	],
	daemon [;
		self.temperature = self.temperature + TEMPERATURE_ADJUST;
		if (IndirectlyContains(Lab, player)) {
			print "^";
			<Examine thermometer>;
		}
		if (self.temperature >= FAILSAFE_TEMPERATURE) {
			deadflag = 4;
			if (IndirectlyContains(Lab, player)) {
				"^The containment unit core temperature has risen above the failsafe threshold! An alarm pierces the silence as the unit is elevated to an iris hatch in the ceiling and ejected out to sea.";
			} else {
				"^Utter chaos breaks out from the direction of the Lab! Sirens and a huge whoosh shatter the silence of the facility as HAVOC personnel tumble hurredly out of their barracks.";
			}
		}
	],
has openable container scenery;

Object hatch "access hatch" containment_unit
with
	name
		'access' 'hatch' 'silicone' 'seal' 'lock',
	article
		"an",
	description [;
		if (player in stepladder) {
			if (stepladder.next_to == containment_unit) {
				print "Here on the stepladder is an easily accessible ";
			} else {
				"Standing on the stepladder, here by ", (the)stepladder.next_to, ", you're too far away to make out any unique or identifying features of the access hatch.";
			}
		} else {
			print "A meter or so out of reach is a ";
		}
		"sliding hatch in the containment unit, trimmed with a silicone seal, and plastered with a warning label. There is no handle nor obvious locking mechanism. It must open electronically.";
	],
	before [;
		Lock, Unlock:
			"The hatch's locking mechanism appears to be electronically controlled from somewhere else.";
		Open:
			"There is no obvious way to manipulate the access hatch.";
	],
has lockable locked;

Object warning_label "warning label" containment_unit
with
	name
		'warning' 'label' 'sign',
	description[;
		if (player in stepladder) {
			if (stepladder.next_to ~= containment_unit) {
				"Here on the stepladder, positioned beside ", (the)stepladder.next_to, ", you're too far away to read the label.";
			}
		}
		print "KEEP HATCH CLOSED AT ALL TIMES^";
		print "Specimen temperature fluctuations^";
		print "  +- 10 degrees^";
		"will trigger containment unit jetison.";
	],
has static;

Object thermometer "green monochrome display" Lab
with
	name
		'large' 'green' 'monochrome' 'display' 'thermometer',
	article
		"an",
	description [;
		print "The large, green monochrome display mounted at the top of the glass cylinder reads:^";
		if (containment_unit.temperature >= FAILSAFE_TEMPERATURE) {
			"CRITICAL^FAILURE";
		} else {
			"CURRENT: ", containment_unit.temperature, "C^
			FAILSAFE: ", FAILSAFE_TEMPERATURE, "C";
		}
	],
has static;


Object red_button "large red button" containment_base
with
	name
		'large' 'red' 'button',
	description
		"A large, red, translucent button lit from inside reads `HATCH` in white block lettering.",
	before [;
		SwitchOn, SwitchOff, Push:
			<<PushWith self second>>;
		PushWith:
			if (actor in stepladder) {
				if (stepladder.next_to == containment_unit) {
					if (second == tongs) {
						print "The tongs are just long enough to reach the button. ";
					} else {
						"Though you're closer to the hatch, you're further from the button. Presumably this would normally be a two-person procedure.";
					}
				} else {
					"Standing on the stepladder next to ", (the)stepladder.next_to, ", it's impossible to reach the button.";
				} 
			}
			if (containment_unit hasnt open) {
				give hatch ~locked;
				give containment_unit open;
				StartDaemon(containment_unit);
				"The access hatch at the top of the containment unit slides open with a hiss. The air instantly becomes noticably cooler.";
			} else {
				give hatch locked;
				give containment_unit ~open;
				StopDaemon(containment_unit);
				containment_unit.temperature = BASE_UNIT_TEMPERATURE;
				"The access hatch at the top of the containment unit slides closed with the sound of vacuum sealing. The environmental system quickly rewarms the room.";
			}
	],
has static;

Object gloves "heavily insulated gloves"
with
	name
		'cryon' 'heavily' 'insulated' 'glove' 'gloves',
	article
		"a pair of",
	description
		"These gloves are made of Cryon, a synthetic fiber that can withstand direct (brief!) contact with incredibly cold substances.",
has pluralname clothing concealed;

Object tongs "tongs"
with
	name
		'long' 'tongs' 'tong' 'pincers',
	capacity
		1,
	description
		"Thin, stainless steel tongs about a meter long, designed to grab small objects. Likely used for taking Ice-X samples.",
	before [;
		Open:
			if (child(self)) {
				print "The tongs release, dropping ", (the)child(self), " to the ground.^";
				if (child(self) == ice) {
					print "It instantly evaporates in a small blue puff of steam.^";
					move ice to containment_unit;
				} else {
					move child(self) to real_location;
				}
				update_moved = true;
				rtrue;
			}
	],
	invent [;
		print "meter-long tongs";
		if (child(self)) print " which grip ", (an)child(self);
		rtrue;
	],
has pluralname container transparent concealed;

Object drawer "vial storage drawer" Lab
with
	name
		'drawer' 'vials',
	description
		"A storage drawer in the cabinet labelled ~Chipped Vials~ holds dozens of them.",
	before [;
		Take: 
			print "You take a vial from the quantity in the drawer. There's no way they'll miss just one.^"; <Take vial>;
	],
has scenery;

Object stepladder "small stepladder"
with
	name
		'rolling' 'steps' 'small' 'utility' 'stepladder' 'ladder' 'stairs' 'staircase',
	found_in
		Lab,
	next_to
		workbench,
	description[;
		print "A 1-meter tall fiberglass stepladder on caster wheels sits beside ", (the)self.next_to;
		if (self.next_to == workbench)
			print ", within a rectangle on the floor, marked in yellow tape";
		".";
	],
	react_before [;
		Go:
			if (selected_direction == d_to)
				<<Exit self>>;
			if (selected_direction == u_to) {
				<<Enter self>>;
			}
	],
	before [;
		PushDir:
			if (selected_direction == s_to) 
				"Pushing it around outside the lab could draw unwanted attention and end the mission. It could be positioned alongside other items in the room.";
			"There's nowhere to go that direction, and pushing it around outside the lab could compromise the mission. The ladder could be positioned next to other things in the room.";
		Push:
			"Push it to where?";
		Transfer:
			if (second == ice or containment_base or hatch or thermometer or warning_label) {
				second = containment_unit;
			} else if (second == marking_tape) {
				second = workbench;
			}
			
			if (actor in self)
				"You try to shimmy the ladder around, but just can't move it while standing on it.";
			if (second == self.next_to)
				"The ladder is already in position there.";
			if (second ~= workbench or equipment_storage or containment_unit) {
				if (selected_direction == 0)
					"The ladder won't possibly be of any help near the ", (the) second, ".";
				"The split-level design of the room makes pushing it around aimlessly frustrating. It could instead be positioned alongside specific features of the room.";
			}
			self.next_to = second;
			print "The caster wheels try to disobey, but the stepladder is now positioned alongside ", (the) second;
			if (self.next_to == workbench)
				print ", back in its designated storage area marked on the floor like it had never left";
			".";
		Climb, Enter:
			if (actor in self) 
				"You're already standing on the stepladder.";
			move actor to self;
			update_moved = true;
			print "You scramble quickly up the stepladder, which is positioned beside ", (the)self.next_to, ".^^";
			if (self.next_to == workbench)
				"There's not much to see from this vantage point, just the top of the laborary workstations, and there's nothing interesting there.";
			if (self.next_to == equipment_storage)
				"The top of the equipment storage cabinet is spotless and utterly dust free. HAVOC is nothing if not disciplined.";
			if (self.next_to == containment_unit or containment_base)
				"The stepladder provides just enough height to reach the access hatch of the containment unit.";
		Exit:
			if (actor notin self)
				"You're not standing on the ladder.";
			move actor to Lab;
			update_moved = true;
			"You nimbly dismount the short stepladder.";
	],
	invent [;
		print "a rolling stepladder next to ", (the)self.next_to;
		rtrue;
	],
has static supporter enterable;

Object marking_tape "marking tape" Lab
with
	name
		'designated' 'rectangle' 'area' 'yellow' 'vinyl' 'marking' 'tape',
	description
		"Obviously added after the fact by the staff, it draws a rectangle the size of the stepladder.",
has scenery;

Object ice "Ice-X" containment_unit
with
	name
		'azure' 'blue' 'crystal' 'crystals' 'ice' 'icex' 'ice-x' 'sample' 'fragile' 'sparkling' 'shimmering' 'dense' 'mass' 'jewel-like',
	article
		"the",
	melt_stage
		0,
	description 
		"Blue microcrystals of Ice-X which seem to shimmer and glow from an internal energy. They'd make for perfect evidence of HAVOC's work here, if you could smuggle some out. Theoretically, they should be quite fragile if exposed to air for more than a few moments.",
	before [;
		Listen:
			"Coinciding with the shimmer you hear what sounds like the tinkling of fragile glass chimes.";
		Transfer:
			if (self in tongs) {
				give tongs open;
				<<Insert self second>>;
			}
		Insert:
			if (second hasnt container)
				"You can't put anything inside ", (the)second, ", let alone ", (the)self, ".";
			if (second ~= vial)
				"There's no safe way to put ", (the)self, " into ", (the)second, ".";
			if (self notin tongs)
				"You haven't extracted a sample from the containment unit.";
			move ice to vial;
			update_moved = true;
			"Luckily, you have deep experience with similar crystaline substances and successfully transfer the fragile Ice-X to the vial.";
		Take:
			if (actor notin stepladder)
				"The access hatch is too high up to reach without assistance.";
			if (stepladder.next_to ~= containment_unit)
				"Standing on the stepladder puts you at the right height to access the containment unit's hatch, but the ladder being next to ", (the)stepladder.next_to, " puts you too far away to reach it.";
			if (containment_unit hasnt open) 
				"The access hatch is closed, keeping the Ice-X cold and the room warm.";
			if (gloves hasnt worn)
				"Sticking a bare arm into the sub-arctic temperatures of the containment unit would bring the mission to an abrupt and painful end.";
			if (second ~= tongs)
				"Even with gloves, reaching directly into the containment unit would cause traumatic ice burns.";
		PickUp:
			if (actor notin stepladder) {
				if (second == tongs)
					"The tongs only barely reach to the bottom edge of the access hatch.";
				<<Take self>>;
			}
			if (containment_unit hasnt open) <<Take self>>;
			if (gloves hasnt worn) <<Take self>>;
			if (second ~= tongs) <<Take self>>;

			move ice to tongs;
			update_moved = true;
			StartDaemon(ice);
			"The tongs work perfectly and you extract a single, fragile crystal from the containment unit.";
	],
	daemon [;
		if 	((parent(self) ~= containment_unit or vial) ||
		 	((parent(self) == vial) && (vial has open))) {
			self.melt_stage = self.melt_stage + 1;
		}

		if (self.melt_stage == FAILED_CRYSTAL_STAGE) {
			move self to containment_unit;
			self.melt_stage = 0;
			update_moved = true;
			print_ret (The)self, " quickly evaporates in a tiny wisp of pale blue steam.";
		}
	],
	invent [;
		print "a sample of Ice-X";
		if (self in tongs) print " (held by the tongs)";
		rtrue;
	],
has small;

Object equipment_storage "equipment storage cabinet"
with
	pickability
		4,
	name
		'equipment' 'storage' 'cabinet' 'lock',
	article
		"an",
	found_in
		Lab,
	description [;
		print "A steel cabinet with ";
		if (self has open) {
			print "open, ";
		} else {
			print "closed, ";
		}
		"tempered glass doors houses an assortment of equipment for temperature-sensitive experiments.";
	],
	before [;
		Open:
			if (self hasnt locked) {
				print "Quite a bit of equipment here to search through; there's bound to be something useful.^";
				give self open;
				if (self hasnt general) {
					give self general;
					move gloves to self;
					move tongs to self;
					move vial to self;
					update_moved = true;
				}
				rtrue;
			}
		Search:
			if (self has open) {
				give gloves ~concealed;
				give tongs ~concealed;
				give vial ~concealed;
				"Insultated gloves, tongs, specimen vials, and more.";
			}
			"You need to open the cabinet before you can search it.";
		Receive:
			if (noun ~= gloves or tongs or vial)
				"There's no place to put ", (the)noun, " into the storage cabinet without it being obviously out of place.";

			if (noun == gloves) {
				print "You return the gloves back to their storage hook";
				if (ice in vial)
					print ", exactly as you found them";
				print ".";
			}
			if (noun == tongs) {
				print "The tongs are returned to their original storage spot";
				if (ice in vial)
					print ", like nothing happened";
				print ".";
			}
			if (noun == vial) {
				if (ice in vial)
					"With a sample of Ice-X in it, your infiltration would likely be recognized by HAVOC scientists in the morning.";
				print "You place the vial back into its drawer.";
			}
			move noun to self;
			update_moved = true;
			"";
	],
	invent
		"an equipment storage cabinet",
has container openable transparent locked lockable;

Object vial "specimen vial" 
with
	name
		'chipped' 'specimen' 'vial',
	description [;
		if (self in equipment_storage)
			print "A large quantity of specimen vials kept in a drawer labelled ~Chipped Vials~. ";
		"A small, overly-engineered thermos which should keep any specimen perfectly hot or cold for up to 12 hours. Appears to hold about one gram, a peanut-sized volume.";
	],
	before [;
		Receive:
			if (self hasnt open)
				"The vial is closed.";
			if (noun ~= ice)
				"That would never fit into such a tiny vial.";
		Open:
			if (ice in self)
				StartDaemon(ice);
		Close:
			if (ice in self)
				StopDaemon(ice);
				ice.melt_stage = 0;
	],
	invent [;
		print "an insulated specimen vial";
		if (self has open)
			if (child(self))
				print " (holding ", (the)child(self), ")";
		rtrue;
	]
has small openable container concealed;

Object dolphins "D.O.L.P.H.N. units"
with
	name
		'propulsion' 'units' 'unit' 'dolphn' 'dolphin',
	article
		"your team's",
	found_in
		Ocean,
	description 
		"Affectionately known as a 'dolphin' (D.O.L.P.H.N. : Deep Oceanic Lifeline and Propulsive Hydro-Navigator), this one-man propulsion unit developed by and for Strike Force has a tempered glass bullet-dome front with motorcycle-style handles for steering and throttle. It drags the rider through water much faster than swimming.",
	before [;
		Enter:
			if (toilet hasnt general)
				"You've an internationally critical mission to perform before leaving, commander.";
			Coda();
	],
has enterable scenery;

Object magnetic_tether "magnetic tether"
with
	name
		'magnetic' 'tether',
	found_in
		Ocean,
	description
		"These magnetic tethers are the only thing keeping the D.O.L.P.H.N. units from being swept away by cross currents during the mission.",
has scenery;

Object outer_airlock_door "outer airlock door"
with
	name
		'outer' 'airlock' 'door' 'lock',
	door_dir
		(n_to) (s_to),
	found_in
		Ocean Airlock,
	article
		"the",
	before [;
		Pull, Open:
			if (real_location == Ocean) {
				if (self has locked) "The handle is in the closed position.";
				if (voltmeter.bypassed == false)
					"The door will not budge until the airlock security system is successfully bypassed.";
				if (self has open) "The airlock door is already open.";
				give self open;
				"The door swings open, silently and easily.";
			} else {
				"Raven gives you a stern look, ~Soldier, I'm not sure what you're thinking right now. Your mission lies inside the facility, not out there.~";
			}
	],
	description [;
		if (real_location == Ocean) {
			if (self has open) {
				print "The airlock door is wide open. ";
			} else {
				print "Tightly fit into the bulkhead, the airlock door is engineered to enough precision to make it difficult to discern where the door ends and the hull of the facility begins. ";
			}
			print "^^A titanium panel to the left of the door is ";
			if (access_panel has general) {
				print "floating in the water, attached to a control box by a bundle of colorful wires";
			} else {
				print "embedded into the steel hull";
			}
			" and a fist-sized dimple in the door houses a grippable handle.";
		} else {
			"A submarine-style airlock door with a large wheel embedded in the center that manually locks and unlocks it.";
		}
	],
has scenery door openable lockable locked;

Object airlock_wheel "airlock wheel" Airlock
with
	name
		'large' 'wheel',
	description
		"If the pressure is balanced, turning the wheel is enough to disengage the locks and open the door manually.",
	before [;
		Turn:
			<<Open outer_airlock_door>>;
		Push, Pull:
			"It's locked up tight. No amount of pushing or pulling will get it open.";
	],
has scenery;

Object inner_airlock_door "inner airlock door"
with
	name
		'inner' 'airlock' 'door',
	door_dir
		(n_to) (s_to),
	found_in
		Airlock Receiving,
	article
		"the",
	description [;
		if (self has open)
			"The inner airlock door is wide open.";

		"A bog-standard airlock door with a rotatable handle to unseal and open it into the main facility.";
	],
has scenery door openable;

Object inner_handle "inner airlock handle" Airlock
with
	name
		'handle',
	before [;
		Examine:
			<<Examine inner_airlock_door>>;
		Open, Turn, Push:
			<<Open inner_airlock_door>>;
		Pull, Close:
			<<Close inner_airlock_door>>;
	],
has scenery;

Object handle "door handle"
with
	name
		'inset' 'dimple' 'oblong' 'rotatable' 'handle',
	found_in
		Ocean,
	before [;
		Turn:
			if (voltmeter.bypassed == true) {
				if (outer_airlock_door has locked) {
					give outer_airlock_door ~locked;
					"The handle rotates smoothly. The airlock door should be openable now.";
				} else {
					give outer_airlock_door locked;
					"The handle turns easily, resealing the airlock door.";
				}
			}
			"The handle absolutely refuses to budge.";
	],
	description 
		"An oblong handle with a grip sits inset and flush to the door's surface. It looks rotatable.",
has scenery;

Object ResearchFacility "HAVOC Research Facility"
with
	name
		'secret' 'havoc' 'research' 'facility' 'lab' 'base',
	found_in
		Ocean,
	description
		"When you approached the facility, you caught a decent look at its construction. Two immense cannisters in parallel, which are then connected to a wide shaft that runs like the spine of a great beast to a domed ~head~.^^6 shipping container-sized cannisters branch symmetrically from the spine, the ~ribs~ of the facility. It sits silently with minimal port and starboard navigation lights, and a lone white light illuminates the aft airlock door. Your propulsion units float tethered to the hull.",
has scenery;

Object bulkhead "bulkhead"
with
	name
		'bulkhead' 'hull' 'cannister' 'tube' 'corridor' 'dome' 'spine' 'ribs',
	article
		"the",
	found_in
		Ocean,
	description [;
		print "Sleek and sturdy, the stainless steel cannisters that comprise the bulkhead sit heavily on the silty ocean floor. The dome unit and the middle section of the corridor ~spine~ appeared to be newer than the rest of the modules";
		if (access_panel has general)
			print ".^^An access panel has been unscrewed from the main bulkhead and floats, tethered to the hull by a bundle of rainbow-colored wires.";
		".";
	],
has scenery transparent;

Object access_panel "titanium access panel" bulkhead
with
	name
		'hanging' 'dangling' 'titanium' 'access' 'panel' 'plate',
	add_to_scope
		screws control_box ribbon_cable,
	description [;
		if (self hasnt general)
			"A flat square of metal with rounded corners, screwed into the surface of the facility's bulkhead with four stainless steel socket-headed screws.";
		"A flat square of metal with rounded corners, hanging from an inset control box by a colorful bundle of wires. It appears to be a key card reader for a Q13 security system.";
	],
	before [;
		Remove, Open, Take:
			"It's screwed on tightly and won't budge.";
		Close:
			if (second == multitool)
				<<Screw screws>>;
			if (self has general)
				"You put the access panel back in place, but it just falls off again.";
			"The access panel is already screwed down in place.";
		Lock, Unlock, Turn, Screw:
			<<Screw screws>>;
	],
has static removable;

Object control_box "electrical control box" Ocean
with
	name
		'book-sized' 'inset' 'electrical' 'control' 'box' 'compartment',
	article
		"an",
	before [;
		if (self has concealed) {
			if (self hasnt general)
				"There isn't one of those around to do that to.";
		}
		Open:
			if (self has concealed)
				"The only way to open the control box would be by removing the access panel.";
			"It's already open, its access panel floating in the water, tethered by a bundle of wires.";
		Close:
			<<Close access_panel>>;
		Turn, Screw:
			"The control box itself doesn't contain any screws, though its access panel does.";
	],
	description [;
		if (self has concealed) {
			if (self hasnt general)
				"You scan the area but fail to find anything like that.";
			"The control box is covered by its access panel which is screwed down to the bulkhead.";
		}
		"A book-sized compartment in the hull of the facility, which houses a small gauge. A bundle of colored wires pours from it, connected to a dangling access panel.";
	],
has static container concealed;

Object multitool "Strike Force multitool"
with
	name
		'tool' 'multitool' 'screwdriver' 'compass' 'knife' 'utility' 'torch' 'soldering' 'lockpick' 'data',
	article
		"your",
	before [;
		ThrowAt, PutOn, Give, Drop:
			if (noun == self) "That's one of Strike Force's most important tools. In a Striker's capable hands it can overcome many of a mission's obstacles. Try to keep it on your person at all times, barring emergencies.";
		! ThrowAt:
		! 	if (player in stepladder && second == red_button) {
		! 		move multitool to real_location;
		! 		update_moved = true;
		! 		"Thinking outside the box, you invent a new use for the multitool. You grip it throwing star style, between open palm and thumb, much like you've seen Shuriken do in practice. Lining up your shot to the button, you fling!^^And miss. You don't have nearly the ninjutsu skills required to make that happen.";
		! 	} else {
		! 		<<Drop self>>;
		! 	}
	],
	react_before [ out_door;
		LockPick:
			if (real_location == stall) {
				print "From inside the stall you don't need a lockpick and simply manipulate the lock by hand. ";
				out_door = stall.out_to();
				if (out_door has locked)
					<<SimpleUnlock out_door>>;
				<<SimpleLock out_door>>;
			}
	],
	description [;
		print "A standard-issue Strike Force multitool for field operations. Can function as a (near) universal screwdriver, compass, utility knife, soldering torch, lockpick, and can store some 4 million bytes of data. Functions well in all environments";
		if (self in snowdrift)
			", even the frozen tundra of the Arctic.";
		if (self in raven)
			": land, sea, and air.";
	],
has shared;

Object screws "socket-headed screws"
with
	name
		'stainless' 'steel' 'socket' 'bolt' 'bolts' 'screw' 'screws',
	description
		"Four 5/16~ stainless steel screws with a hexagonal socket in the head.",
	before [ w;
		Take:
			if (access_panel hasnt general)
				"They're screwed down tightly, holding the access panel in place.";
			"They're captive screws, meaning they can be loosened and tightened, but a retaining flange prevents their outright removal.";
		Solder:
			"The multitool's soldering torch is far too weak to have any affect on the screws.";
		Remove, Turn, Screw:
			if (access_panel hasnt general) {
				if (verb_word == 'tighten' or 'close' or 'replace')
					"The screws are as tight as they can get.";
				give access_panel general;
				give control_box ~concealed;
				give control_box general;
				give ribbon_cable ~concealed;
				give voltmeter ~concealed;
				objectloop (w ofclass Wire)
					give w ~concealed;
				"You loosen the captive screws with the multitool and the plate comes away from the hull, revealing a control box. The plate floats attached to the box by a colorful bundle of wires.";
			} else {
				if (verb_word == 'loosen' or 'open' or 'remove')
					"The access panel screws are already disengaged from the bulkhead.";
				give access_panel ~general;
				give control_box concealed;
				give ribbon_cable concealed;
				give voltmeter concealed;
				objectloop (w ofclass Wire)
					give w concealed;
				"You tighten the captive screws, firmly reattaching the access panel to the control box, leaving no visible sign of tampering.";
			}
	],
has scenery removable;

Object ribbon_cable "colorful ribbon cable" control_box
with
	name
		'multicolored' 'mutihued' 'rainbow-colored' 'colorful' 'ribbon' 'bundle' 'cable' 'wires' 'rainbow',
	before [;
		Take, Remove: "Removing the cable outright will trigger a system failure alarm. HAVOC forces would swarm you in seconds.";
	],
	description [w;
		if (self has concealed) {
			if (self hasnt general)
				"There are no visible wires in your vicinity.";
			"The wires are hidden inside the control box which is covered by its access panel.";
		}
		if (self hasnt general) {
			give self general;
			print "A ribbon cable of eight colored wires connects a Q13 key card system to the airlock door. Luckily, this system has a security flaw which can be exploited in a careful regulation of the voltage in a rising - falling - rising pattern.^^
			Phase 1, initialize the voltage to between 95-100v; no higher. Once set, the system will become fairly sensitive. Phase 2, LOWER the voltage by 9-10v MAX; don't exceed phase 1 voltage. At this point, the system will become highly sensitive. Finally, quickly RETURN to phase 1 voltage.^^";
		} else {
			print "A ribbon cable that controls the security system for the airlock door. Its known security flaw can be exploited in three phases.^^
			Phase 1: Initialize to 95-100v MAX; do not exceed 100v.^
			Phase 2: LOWER by 9-10v MAX; never exceed Phase 1 voltage.^
			Phase 3: RETURN to phase 1 voltage.^^";
		}
		print "The current state of the wires:";
		objectloop (w ofclass Wire) {
			print "^    ", (string)w.short_name, " (";
			if (w.voltage > 0) print "+";
			print w.voltage, "v) : ";
			if (w.crossed) {
				print "crossed with ", (the)w.crossed;
			} else if (w has general) {
				print "severed";
			} else {
				print "intact";
			}
		}
		"";
	],
has static concealed;

!general means 'cut'
Class Wire
with
	name
		'wire',
	article
		"the",
	calculated
		false,
	crossed
		nothing,
	voltage
		0,
	before [;
		if (self has concealed) {
			if (ribbon_cable hasnt general)
				"You don't see a ", (name)self, " anywhere in the vicinity.";
		}
		Cut:
			if (self has general) "That wire is already cut.";
			if (self.crossed ~= nothing) {
				give self.crossed general;
				self.crossed.crossed = nothing;
				self.crossed = nothing;
			}
			give self general;
			print "With swift, practiced care, ", (the)self, " is snipped cleanly. ";
			if (voltmeter.bypassed == false)
				voltmeter.update_voltage();
			"";
	],
	description [;
		if (self has concealed)
			print_ret (The)self, " is part of a ribbon cable which is secured in the control box behind the access panel.";
		print (The)self, ", which regulates ";
		if (self.voltage > 0) print "+";
		print self.voltage, " volts, is ";
		if (self has general) {
			print "severed";
		} else {
			if (self.crossed ~= nothing) {
				print "cross-connected to ", (the)self.crossed;
			} else {
				print "intact";
			}
		}
		".";
	],
has static concealed;

Wire light_pink_wire "light pink wire" control_box
with	name 'light' 'pink',
		short_name "light pink wire",
		voltage -1;

Wire dark_pink_wire "dark pink wire" control_box
with	name 'dark' 'pink',
		short_name "dark pink wire",
		voltage 1;

Wire light_turquoise_wire "light turquoise wire" control_box
with	name 'light' 'turquoise',
		short_name "light turquoise wire",
		voltage -3;

Wire dark_turquoise_wire "dark turquoise wire" control_box
with	name 'dark' 'turquoise',
		short_name "dark turquoise wire",
		voltage 3;

Wire light_orange_wire "light orange wire" control_box
with	name 'light' 'orange',
		short_name "light orange wire",
		voltage -7;

Wire dark_orange_wire "dark orange wire" control_box
with	name 'dark' 'orange',
		short_name "dark orange wire",
		voltage 7;

Wire light_purple_wire "light purple wire" control_box
with	name 'light' 'purple',
		short_name "light purple wire",
		voltage -13;

Wire dark_purple_wire "dark purple wire" control_box
with	name 'dark' 'purple',
		short_name "dark purple wire",
		voltage 13;

[ CalculateVoltage w v;
	print "^Calculating the total voltage...^";
	v = 0;
	objectloop (w ofclass Wire) {
		print "  ", (name)w, "^";
		if (w hasnt general) {
			! print "    isn't cut^";
			if (w.calculated == false) { !prevent against double-counting
				print "    hasn't been calculated yet^";
				w.calculated = true;
				if (w.crossed == nothing) {
					! print "    isn't crossed with anything^";
					if (w provides voltage) {
						v = v + w.voltage;
						print "    adding ", w.voltage, "^";
						print "      total is: ", v, "^";
					} else {
						print "!!!", (name)w, " has no voltage?!?!^";
					}
				} else {
					print "    is crossed with ", (name)w.crossed, "^";
					v = v + (w.voltage * w.crossed.voltage);
					w.crossed.calculated = true;
					print "    adding ", (w.voltage * w.crossed.voltage), "^";
					print "      total is: ", v, "^";
				}
			}
		} else {
			! print "    is cut^";
		}
	}

	!reset the calculated property for next time
	objectloop (w ofclass Wire)
		w.calculated = false;

	print "Returning: ", v, "^";
	return v;
];

Object voltmeter "voltmeter" control_box
with
	name
		'voltmeter' 'gauge',
	total_voltage
		0,
	phase
		1,
	min_voltage
		-150,
	max_voltage
		100,
	bypassed
		false,
	description [;
		if (self has concealed) {
			if (self hasnt general)
				"You don't see a ", (name)self, " anywhere in the vicinity.";
			"The voltmeter is locked away behind the access panel.";
		}
		if (self hasnt general) {
			give self general;
			print "A squarish voltmeter gauge with demarcations running 180 degrees, ranging -150v to +150v. Its registered voltage is the summation of every connected wire's voltage, or the multiple of any two wires which have been cross-fused. ";
		} else {
			print "A voltmeter that registers the summation of all connected wires, or the multiple of two cross-fused wires. ";
		}
		print "A needle indicates ";
		if (self.total_voltage > 0) print "+";
		print self.total_voltage, " volts. ";
		if (self.bypassed == true) {
			"^^The security exploit was successful. The airlock door will open now.";
		} else {
			"^^Between the lock and the sea pressure, the airlock door will never open until the security is bypassed.";
		}
	],
	update_voltage[ tv max min;
		self.total_voltage = CalculateVoltage();
		tv = self.total_voltage;
		max = self.max_voltage;
		min = self.min_voltage;

		if (self.phase == 1) {
			if (tv > max) {
				deadflag = 8;
			} else if (tv >= max - 5) {
				self.phase = 2;
				self.max_voltage = tv;
				self.min_voltage = tv-10;
				"With the voltmeter at ", tv, "volts, that sets you up nicely for phase 2: drop the voltage by 9 or 10 volts.";
			} else {
				print "The voltmeter adjusts and now reads ";
				if (tv > 0) print "+";
				print tv, "v.";
			}

		} else if (self.phase == 2) {
			if (tv > max) {
				deadflag = 8;
			} else if (tv < min) {
				deadflag = 8;
			} else if (tv <= max - 8) {
				self.phase = 3;
				"The voltmeter reads ", tv, " volts, which means you just have one more thing to do to pop this lock. Return to ", max, " volts, as you had set in phase 1.";
			} else {
				print "The voltmeter adjusts and now reads ";
				if (tv > 0) print "+";
				print tv, "v.";
			}

		} else if (self.phase == 3) {
			if (tv > max) {
				deadflag = 8;
			} else if (tv < min) {
				deadflag = 8;
			} else if (tv == max) {
				voltmeter.bypassed = true;
				"The voltage springs back to its initialization value and the tiny quiver of the voltmeter needle tell you you've been successful. ~Alright Snowdrift, that takes care of the lock. Let's get inside,~ you say. Snowdrift gives you a quick salute in acknowledgement.";
			} else {
				print "The voltmeter adjusts and now reads ";
				if (tv > 0) print "+";
				print tv, "v.";
			}

		} else {
			print "Voltmeter phase is ", self.phase, "?!?!";
		}
	],
has static;

Class Striker
has proper animate;

Striker raven "Raven"
with	name
			'self' 'me' 'myself',
		short_name
			'yourself',
		description
			"A proud, founding member of Strike Force. I'm this mission's field commander and security & information specialist. A black belt in various forms of martial arts and a fine jazz saxophonist, if I do say so myself.",
		pick_skill
			9,
has female concealed;

Striker fake_raven "Raven"
with	name
			'raven' 'commander',
		short_name
			"Raven",
		description 
			"A founding member of Strike Force. She's the field commander for this mission, and an expert in security and information retrieval. Without the commander's good word, I wouldn't have been made a Striker. I owe her my career and trust her with my life",
		life [;
			Ask:
				switch(second) {
					'mission': 
						"~I repeat, we get in, get some kind of evidence of HAVOC's plan, and get out. We leave no sign we were here.~";
					'strike', 'force':
						"~The only defensive line between HAVOC and peace.~";
					'havoc':
						"~I've been fighting them for years now and I will get my revenge for what they did to Piledriver and Blastoff.~";
					'piledrive', 'blastoff':
						"~A story for another time,~ she whispers.";
					default:
						switch(random(3)) {
							1: "~Keep the chit-chat down until we've completed our mission,~ she orders.";

							2: "She places a hand on your shoulder, ~Snowdrift, I need you to trust in your own ability to get the job done. I'm only here to get you in and out.~";

							3: "~Whatever HAVOC is up to here is well outside my wheelhouse. It's your show now. Make the team proud,~ she says.";
					}
				}
		],
		orders [;
			default:
				"~It's your show now, I'm here in case things go south,~ she says. ~So, keep the chatter down and focus on the job. I'd like to get out of here ASAP.~";
		],
has female animate;

Striker fake_snowdrift "Snowdrift"
with
	name
		'snow' 'snowdrift',
	short_name
		"Snowdrift",
	description 
		"Strike Force's Arctic specialist, expert on all things ice and snow. I personally recommended he be allowed to join Strike Force seeing in him the intrepid spirit that drives all Strikers in the fight against HAVOC.",
	life [;
		Ask:
			switch (second) {
				'strike', 'force':
					"~The world's best experts in every discipline. Together we can stop HAVOC every time.~";
				'havoc':
					"~As much as I love being a Strike Force member, I'd give it up if it meant HAVOC was gone.~";
				'piledrive', 'blastoff':
					"~That was before my time. I've only heard mixed rumors,~ he says.";
				default:
					"~Commander, I appreciate you trying to involve me with such matters but our time is short. I'll be happy to train with you on whatever you think best back at home base,~ he says.";
			}
	],
	orders [;
		default:
			"Snowdrift demures, ~I'm only here as the field expert on HAVOC's research, commander. I need your expertise to get into the facility before I can be of any real use.~";
	],
has animate;

Striker snowdrift "Snowdrift"
with
	name
		'self' 'me' 'myself',
	short_name
		'yourself',
	description 
		"Strike Force's Arctic specialist, expert on all things ice and snow. In my free time I enjoy getting away on a quiet beach and am an avid reader. Joined Strike Force 2 years ago; anniversary is actually in just a couple of days.",
	pick_skill
		4,
has concealed;

Include "sf_grammar.h";

[Initialise;
	ship_directions_enabled = true;
	normal_directions_enabled = false;

	move multitool to player;
	move fake_snowdrift to location;
	update_moved = true;
	
	PreviouslyOn();
	Introduction();
];