!% -~S
!% $OMIT_UNUSED_ROUTINES=1
!% $ZCODE_LESS_DICT_DATA=1
!% ++include_path=..\PunyInform\lib

! The very first lines of the main source code file for a game can
! contain compiler options, like the lines above. -~S disables
! strict error checking. This is otherwise used in z5 and z8 games by
! default. While useful for debugging, it adds ~10 KB to the story file
! size and it makes the game slower.
! $OMIT_UNUSED_ROUTINES=1 makes the compiler remove all routines which
! aren't used. This can save some space.
! $ZCODE_LESS_DICT_DATA=1 removes an empty data byte for every dictionary word.

Constant Story      "Strike Force";
Constant Headline   "^The Hydrogen Annihilator^Part 3: Infiltration at the Arctic Circle^^";

! Uncomment ONE of the two following lines, to show either time or score/turns
! Leaving both commented out makes the library bigger.
!Constant STATUSLINE_TIME; Statusline time;
Constant STATUSLINE_SCORE; Statusline score;
 
! Comment out to keep track of score
! The value is what will be shown as the score on statusline in z3
Constant NO_SCORE = 0;

! Customize the statusline in z5+ (has no effect in z3)
!Constant OPTIONAL_SL_NO_SCORE;
Constant OPTIONAL_SL_NO_MOVES;

! Uncomment to add optional features to PunyInform
Constant DEBUG;
!Constant DIALECT_US ! Affects OPTIONAL_ENGLISH_NUMBER
!Constant CUSTOM_ABBREVIATIONS;
Constant CUSTOM_PLAYER_OBJECT = raven;
Constant OPTIONAL_NO_DARKNESS;
! Constant OPTIONAL_FULL_DIRECTIONS;
Constant OPTIONAL_SHIP_DIRECTIONS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
Constant OPTIONAL_EXTENDED_METAVERBS;
Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_FLEXIBLE_INVENTORY;
!Constant OPTIONAL_LANGUAGE_NUMBER;
!Constant OPTIONAL_LIST_TOGETHER;
!Constant OPTIONAL_PRINT_SCENERY_CONTENTS;
!Constant OPTIONAL_SCORED;
!Constant OPTIONAL_FULL_SCORE; ! Comment out NO_SCORE when uncommenting this
Constant OPTIONAL_SIMPLE_DOORS;
!Constant OPTIONAL_MANUAL_SCOPE;
!Constant OPTIONAL_MANUAL_REACTIVE;
!Constant OPTIONAL_ORDERED_TIMERS;
Constant OPTIONAL_PROVIDE_UNDO;
!Constant OPTIONAL_REACTIVE_PARSE_NAME;
!Constant RUNTIME_ERRORS = 0; ! 0, 1 or 2. 0 = smallest file, 2 = most info

! Define any library constants you need here, like MAX_SCORE, AMUSING_PROVIDED,
! MAX_CARRIED, SACK_OBJECT,  etc.

Constant DEATH_MENTION_UNDO;
Constant INITIAL_LOCATION_VALUE = Ocean;

Include "globals.h";

! Define your attributes, common properties and global variables here, if any
Attribute shared;
Attribute small;
Attribute removable;

Constant BASE_UNIT_TEMPERATURE	-200;
Constant FAILSAFE_TEMPERATURE	-190;
Constant TEMPERATURE_ADJUST		2;
Constant FAILED_CRYSTAL_STAGE 	3;

Constant MSG_ANSWER_DEFAULT 1001;
Constant MSG_GO_CANT_GO 	1002;
Constant MSG_UNLOCK_DEFAULT	1003;
Constant MSG_WAIT_DEFAULT	1004;
Constant MSG_YOU_HAVE_WON	1005;
Constant MSG_YOU_HAVE_DIED	1006;
Constant MSG_PUSH_STATIC	1007;
Constant MSG_PULL_STATIC	1008;
Constant MSG_TURN_STATIC	1009;
Constant MSG_TAKE_STATIC	1010;
Constant MSG_TAKE_SCENERY	1011;
Constant MSG_SEARCH_NOTHING_SPECIAL 1012;
Constant MSG_PARSER_NOSUCHTHING 1013;
Constant MSG_DISROBE_NOT_WEARING 1014;
Constant MSG_JUMP			1015;
Constant MSG_JUMP_OVER		1016;
Constant MSG_SEARCH_NOTHING_ON	1017;
Constant MSG_PARSER_UNKNOWN_VERB		1018;
Constant MSG_SING_DEFAULT	1019;
Constant MSG_LISTEN_DEFAULT	1020;
Constant MSG_SHOUT_DEFAULT	1021;
Constant MSG_LOCK_KEY_DOESNT_FIT	1022;
Constant MSG_UNLOCK_KEY_DOESNT_FIT	1023;
Constant MSG_ATTACK_DEFAULT	1024;
Constant MSG_PARSER_DONT_UNDERSTAND_WORD	1025;
Constant MSG_SEARCH_ON_IT_ISARE	1026;
Constant MSG_RUB_DEFAULT	1027;
Constant MSG_SMELL_DEFAULT	1028;
Constant MSG_TAKE_ALREADY_HAVE	1029;
Constant MSG_TURN_ANIMATE	1030;
Constant MSG_CUT_NO_USE	1031;
Constant MSG_PUTON_ITSELF	1032;

[ italic text;
#IfV5;
  style underline;
#Endif;
  print (string)text;
#IfV5;
  style roman;
#Endif;
];

[ CantGoMessage;
	if (parent(actor) == Ocean)
		"Nothing but the vast expanse of the ocean lies that way and this is no time for a swim.";	
	"Examining the wall you discern no sign of a passage in that direction, hidden or otherwise.";
];

[LibraryMessages p_msg p_arg_1 p_arg_2;
	p_arg_1 = p_arg_2;
	switch(p_msg) {
		MSG_ANSWER_DEFAULT:
			"~Getting static here, commander. Be advised.~";
		MSG_GO_CANT_GO:
			CantGoMessage();
		MSG_UNLOCK_DEFAULT:
			"The multitool makes quick work of picking open ", (the)noun, ". It's now unlocked.";
		MSG_WAIT_DEFAULT:
			"You silently assess the situation.";
		MSG_YOU_HAVE_WON:
			print "You have won!  (good ending)";
		MSG_YOU_HAVE_DIED:
			print "You've been captured!";
		MSG_PUSH_STATIC,
		MSG_PULL_STATIC,
		MSG_TURN_STATIC,
		MSG_TAKE_STATIC:
			"You recall the commander's words, ~Leave no trace we were here,~ and decide not to tamper with anything not strictly mission-related.";
		MSG_TAKE_SCENERY:
			"That's not going to advance your mission objective, soldier.";
		MSG_SEARCH_ON_IT_ISARE,
		MSG_SEARCH_NOTHING_ON,
		MSG_SEARCH_NOTHING_SPECIAL:
			switch(random(3)) {
				1: "You move with the sharp efficiency that elite Strike Force training gave you, but discover nothing of note.";

				2: "Time is short, but it pays to be thorough. Regardless, your search comes up empty.";

				3: "A brief examination reveals nothing that will help your mission.";
			}
		MSG_DISROBE_NOT_WEARING:
			"Even with your intensive field training, you're just not going to be able to remove that.";
		MSG_PARSER_NOSUCHTHING:
			switch(random(4)){
				1: "Strike Force training gives you the mental discipline to recognize that won't be useful on this mission.";
				
				2: "You glance at it, quickly judging it non-mission critical.";

				3: "You note its presence, but can tell from experience it won't come into play on this mission.";

				4: "You trust your battle-tested Strike Force instincts and determine that's not important for today's mission.";
			}
		MSG_LOCK_KEY_DOESNT_FIT, MSG_UNLOCK_KEY_DOESNT_FIT:
			"The multitool isn't up to the task of picking complex electronic locks.";
		MSG_JUMP, 
		MSG_JUMP_OVER:
			"The urge to hone your Strike Force-caliber physique is admirable, but you're already in peak performance for this mission.";
		MSG_SING_DEFAULT:
			"That's better left to Strike Force's media specialist, Vox.";
		MSG_KISS_DEFAULT:
			"You're risking the mission, your reputation, your friendship, and possibly a court martial with that behavior.";
		MSG_SHOUT_DEFAULT, 
		MSG_PARSER_UNKNOWN_VERB:
			"There are much more mission-critical things to do than that. Stay frosty, soldier!";
		MSG_LISTEN_DEFAULT:
			"A muffled feeling, as of being in a submarine, with the occasional light creaking of the hull under huge atmospheric pressure.";
		MSG_ATTACK_DEFAULT:
			"This is a stealth mission, not an assault. You need to keep a low profile.";
		MSG_PARSER_DONT_UNDERSTAND_WORD:
			"Your Strike Force intuition says you should find something else to focus your attentions on.";
		MSG_RUB_DEFAULT:
			"That's a job best left for The Viper.";
		MSG_SMELL_DEFAULT:
			"A little musty with an everpresent briny scent, but not nearly as foul as you would expect with a group of soldiers living in close quarters under the sea. Perhaps their research requires good air filtration?";
		MSG_TAKE_ALREADY_HAVE:
			"You fidget with your multitool, verifying it is still on your person. It is.";
		MSG_TURN_ANIMATE:
			"Your multitool is designed to work with screws, not soldiers.";
		MSG_CUT_NO_USE:
			"You recall that HAVOC's latest plans forced you to postpone your annual mental health assessment with Dr. Grace. Keep it together until then, soldier.";
		MSG_PUTON_ITSELF:
			"Haphazardly moving things around could alert HAVOC that you were here. Better to leave that alone and keep a minimal footprint.";
	}
];

! Define the entry point routines you need here, like Amusing, DarkToDark etc.
[ DeathMessage;
	switch (deadflag) {
		3: print "Klaxons sound and spotlights activate; HAVOC has you in their clutches!";

		4: print "HAVOC forces take you and Raven into immediate custody.";

		5: print "HAVOC personnel jump to immediate attention, swarming every corner of the base.";

		6: print "Have you won?  (bad ending)";

		7: print "Complete Mission Failure!";

	}
];

! Uncomment to add PunyLib extensions
!Include "ext_menu.h";
!Include "ext_flags.h";
!Include "ext_talk_menu.h"; ! Note: Also include ext_flags.h to allow use of flags
!Include "ext_quote_box.h";
!Include "ext_cheap_scenery.h";

Include "puny.h";

! Uncomment to add PunyLib extensions
!Include "ext_waittime.h";

[ PressAnyKey k; print "^^[Press any key to continue]"; @read_char 1 -> k; @erase_window 0; return k; ];

[ PreviouslyOn;
	print "Strike hard. Strike fast! STRIKE FORCE!^^
	Strike Force is a multinational team of special mission operatives based in international waters. They serve to protect the world from HAVOC, a relentless force for evil and chaos.^^When the world faces an insurmountable problem, Strike Force is the solution!^^^^";print (italic)"Previously on Strike Force...^^";
	print "Master Bedlam unleashed HAVOC's most terrifying weapon yet, an instantaneous energy beam which destroyed the Great Pyramids of Giza!^^While the world is held at ransom, Strike Force learns of a secret HAVOC research laboratory deep in the Arctic Ocean. Major Vanguard sends Raven and Snowdrift on a midnight mission to infiltrate the station and obtain evidence of HAVOC's plans.
	^^And now, part 3 of ~The Hydrogen Annihilator!~";
	PressAnyKey();
];

[ Introduction;
	print "The ocean at the Arctic Circle is black and still, an alien world on earth daring humanity to explore its depths. Sitting defiantly on the seabed one kilometer down lies a HAVOC research station, its evil presence a blight in the pristine waters.^^Two dim, violet spotlights emerge from the inky darkness.^^";
	print "~Gotta hand it to HAVOC, they're nothing if not adaptable,~ Raven says as she survey's the station on approach.^^~Yeah, vermin typically are,~ quips Snowdrift. ~Commander, look there at the fore dome. That's a WVCA generator for temperature regulation.~^^~Something to keep the fascists warm?~^^Snowdrift clucks his tongue, ~That would be overkill, even in these waters. More likely they're experimenting with near-zero materials.~^^~Then you were definitely the right choice for the mission,~ she affirms. Arriving at the aft airlock they dismount their propulsion units, tether them to the facility, and get to work.";
	PressAnyKey();
];

[ Coda;
	@erase_window 0;
	deadflag = 2;
	print "Snowdrift slips into the airlock, ~Mission accomplished, commander. Recommend a hasty retreat.~^^
	Raven nods in agreement, ~Good work, soldier. I knew it was a wise bet bringing you along. Let's get out of here.~^^
	The two hurredly redon their pressure gear, flood the airlock, and exit back out into the ocean and their waiting D.O.L.P.H.N. units.^^
	With stealth and care, the vial containing the Ice-X sample is retrieved and the team speeds off toward their exfiltration point, swiftly disappearing into the dark, arctic waters.";
	if (control_box has open) {
		deadflag = 6;
		print "^^Raven mutters to herself, ~Why do I have this nagging feeling I've forgotten something?~";
		if (stepladder.next_to ~= main_console) {
			print "^^Snowblind grows silent, ~Yeah, I do too.~";
		}
	} else if (stepladder.next_to ~= main_console) {
		deadflag = 6;
		print "^^Snowblind breaks the silence, ~Commander, I can't help but think I forgot something back at the research lab.~";
	}

	if (deadflag == 6) {
		print "^^Raven sighs, ~If any mistakes were made, there's nothing we can do about it now. We got what we came for, so hopefully that's enough to push things in our favor.^^~Hopefully,~ she whipsers without conviction.";
	}

	print "^^^";
	print "On the next episode of Strike Force!^";
	print "* * * * * * * * * * * * * * * * * * * * *^";
	if (deadflag == 2) {
		print "Having gained an important tactical advantage with their flawless raid on the arctic research station, Strike Force pushes back against HAVOC's plans as Master Bedlam looks to harvest a rare gaseous compound at the top of Mount Everest in part 4 ~Summit of Doom!~";

	} else {
		print "Having quickly detected the infiltration of their arctic base, HAVOC gains the upper hand, swiftly bringing the world to its knees, holding The Great Wall of China ransom for $100 billion in part 4 ~The Destruction of Strike Force!~";
	}
];

Object various "(facility various)"
with	name
			'wvca' 'generator' 'ribs',
		found_in
			Ocean,
		description
			"From where the team sits at the aft-side airlock door, and in this darkness, that part of the facility is out of sight.",
has scenery;

Object Ocean "Ocean, Outside the Airlock"
with
	initial [;
		print (italic)"[You now control Raven, field commander and security expert.]^";
		"You turn to Snowdrift, ~OK, remember our mission: get in, get evidence, get out. Leave no trace we were here.~^^Snowdrift asks, ~What kind of evidence, commander?~^^~Remains to be seen. HAVOC plays for keeps, so I suspect you'll know it when you see it. First thing's first: I need to get that airlock door open for you.~^";
	],
	description [;
		print "You're outside HAVOC's secret research base in the Arctic Ocean, some 500 fathoms below. Navigation lights decorate the facility, dimly illuminating the surrounding darkness. ";
		if (outer_airlock_door has open)
			"To fore, the facility's aft airlock door stands open.";
		"The airlock door to fore is closed.";
	],
	in_to
		outer_airlock_door,
	n_to
		outer_airlock_door;

Object ocean_scenery "ocean scenery" Ocean
with
	name
		'ocean' 'sea' 'depths' 'water',
	description
		"Vast and unknowable. The still waters seem unusually devoid of marine life in the area immediately around the station. Either HAVOC's research is repelling the fish, or even sea creatures understand instinctively that HAVOC is best avoided.",
	react_before [;
		Listen:
			"The sound of your own breathing drowns out any other sounds that might be happening. Through the in-helmet intercom system, Snowdrift's breathing can faintly be heard.";
	],
has scenery;

Object Airlock "Airlock"
with
	initial[;
		if (self hasnt general) {
			give self general;
			move snowdrift to self;
			move fake_raven to self;
			remove raven;
			remove fake_snowdrift;
			player = snowdrift;
			move multitool to snowdrift;
			update_moved = true;
			give outer_airlock_door ~open;
			print "You and Snowdrift move swiftly into the airlock, sealing the door behind. As chamber pressure is re-established, yellow lights flash silently, sure to draw attention to your presence!^^You hover a fist over an emergency release button, ready to punch it. However, your luck holds and the procedure finishes without incident. You quickly stash your pressure suits on available hooks.^^
			~OK, Snowdrift, you're up. To keep our chance of being detected as low as possible you have to go it alone. Once you rendezvous with me here we end the mission; no second chances,~ you say.^^In quiet unison you chant, ~Strike hard. Strike fast. Strike Force.~^^";
			print_ret (italic)"[You now control Snowdrift, arctic specialist and expert in all things ice and snow.]^";
		}

		if (toilet has general) {
			deadflag = 2;
			Coda();
		} else {
			deadflag = 7;
		}
	],
	description
		"The far-aft airlock of HAVOC's research base. Enameled steel benches in battle grey line the portside wall. Hooks with pressure suits dress the starboard wall. The inner airlock door leading fore has a porthole which looks out into the base. The outer airlock door is aft.",
	out_to
		outer_airlock_door,
	s_to
		outer_airlock_door,
	in_to
		inner_airlock_door,
	n_to
		inner_airlock_door;

Object emergency_release "emergency release button" Airlock
with
	name
		'emergency' 'release' 'button',
	description
		"A red mushroom-shaped button under a clear plexiglass hinged cover. Punch it and explosive bolts on the airlock door will blow, providing an emergency escape in the case of dire emergency.",
	before [;
		Push, SwitchOn, SwitchOff:
			"~Hopefully we won't need to use that,~ Raven notes, ~But it's good field instinct that you're assessing our options.~";
	],
has scenery;

Object pressure_suits "pressure suits" Airlock
with
	name
		'havoc' 'hook' 'hooks' 'pressure' 'suit' 'suits',
	description
		"Two sleek, flexible Strike Force pressure suits, designed by yourself and Fathom for the temperature and pressures of the Arctic Ocean, hang on hooks next to HAVOC suits of a clunkier, more menacing, design.",
has scenery;

Object benches "benches" Airlock
with
	name
		'battle' 'grey' 'enameled' 'steel' 'bench' 'benches',
	description
		"A no-nonsense place for sitting down.",
	before [;
		Enter:
			move player to self;
			update_moved = true;
			"You sit down next to Raven, steeling yourself up for the mission.";
	],
	react_before [;
		Exit:
			if (player in self) {
				move player to Airlock;
				update_moved = true;
				"You stand up with renewed vigor to disrupt HAVOC's plans.";
			} else {
				if (verb_word == 'stand')
					"You're standing at your full height already.";
			}
	],
has static supporter;

Object airlock_porthole "inner airlock porthole" Airlock
with
	name
		'window' 'porthole',
	description
		"A small window that looks into the base proper straight through to a few rooms away. There's nothing of note to see, and more importantly NOBODY to see. The coast is clear.",
has scenery;

Object Receiving
with
	short_name
		"Receiving Area",
	description [;
		if (self hasnt general) {
			give self general;
			print "You take a quiet, cautious step out of the airlock and into the research base proper. Raven gives you a silent thumbs up.^^";
		}
		"This area seems to be used to stage supplies as they're brought in from the airlock; nothing is currently staged. To port is an open pantry, to starboard is the galley, and fore leads through a short connecting passageway into the next module of the station.";
	],
	s_to [;
		if (toilet hasnt general)
			"Rendezvousing with the commander in the airlock without having collected any evidence will immediately end your mission in total failure. Everyone's counting on you, soldier!";
		return inner_airlock_door;
	],
	w_to
		Pantry,
	e_to
		Galley,
	n_to
		MessHall;

Object Pantry "Pantry"
with
	description
		"Tidy shelves hold boxes, cans, sacks, and plastic containers of food. Every item is wrapped in a deep blue label with bold, white lettering.",
	e_to
		Receiving;

Object foodstuffs "various foodstuffs" Pantry
with
	name
		'shelves' 'food' 'box' 'boxes' 'can' 'cans' 'sack' 'sacks' 'plastic' 'container' 'blue' 'label' 'rigatoni' 'foodstuffs' 'stuff' 'stuffs',
	description 
		"There's a wide variety to stave off culinary boredom. One sample box is a solid, deep blue with bold, white Helvetica ~RIGATONI~. Smaller text gives the total volume and ration size. On the backside in bright yellow is a tastefully restrained HAVOC logo.",
	before [;
		Eat:
			"It contains a chemical agent developed by Dr. Yellowjacket which renders HAVOC food poisonous to anyone not innoculated. HAVOC agents receive monthly shots to protect against this.";
	],
has edible pluralname static;

Object logo "HAVOC logo" Pantry
with
	name
		'logo',
	description 
		"Makes one's skin crawl at what, and who, it represents.",
has scenery;

Object Galley "Galley"
with
	description
		"A spotless, compact kitchen in stainless steel with the expected assortment of appliances and utensils.",
	before [;
		Smell:
			"Aside from the saltwater and general close-quarters funk, they seem to have had fresh bread for dinner.";
	],
	w_to
		Receiving;

Object appliances "appliances" Galley
with
	name
		'assorted' 'appliances' 'utensils' 'compact' 'kitchen' 'stand' 'mixer' 'dough' 'paddle' 'microwave' 'magnetic' 'knife' 'block' 'chefs' 'knives' 'knife' 'food' 'processor',
	description
		"A stand mixer with the dough paddle installed, a microwave oven big enough to hold a large chicken, a magnetic knife block with a variety of basic chef's knives, and a food processor. A walk-in refrigerator is inset into the aft wall.",
	before [;
		Receive:
			"You make a mental note to take basic cooking lessons from Flavortown when you get back to home base.";
		SwitchOn, SwitchOff:
			"That would make entirely too much noise and blow the mission.";
	],
has static pluralname container open concealed;

Object refrigerator "walk-in refrigerator" Galley
with
	name
		'walk-in' 'fridge' 'refrigerator' 'freezer',
	description
		"A walk-in refrigerator/freezer is built into the aft wall. You know this model isn't rated for temperatures that explain the presence of the WVAC unit you saw when approaching the station. The mystery of HAVOC's research surely lies further afore.",
	before [;
		Open, Close, Enter, Lock, SimpleUnlock:
			"The facility's research won't be discovered inside a restaurant-grade refrigerator. You're definitely looking for something much, much colder.";
	],
has static lockable concealed;

Object MessHall "Mess Hall"
with
	description
		"This shared-use module is split with one third dedicated to a mess hall and the remainder to recreation. The mess hall portion is bare-bones with long tables and folding chairs.^^The recreational area holds couches, plush chairs, a television, and other leisure items.^^From here you can continue deeper into the facility to fore, or return aft back to the receiving area and airlock.",
	n_to
		CorridorC,
	s_to
		Receiving;

Object television_logo "HAVOC logo" MessHall
with
	name
		'havoc' 'logo',
	description
		"It looks like the television's original ~Magnetbox~ logo was scratched off and covered with HAVOC's bright yellow logo.",
has scenery;

Object recreational_scenery "recreational furniture" MessHall
with
	name
		'recreational' 'furniture' 'flat' 'screen' 'television' 'tv' 'couch' 'couches' 'plush' 'chairs' 'chair',
	description
		"Even the bad guys need to relax sometimes. Plush couches and chairs are clad in identical dark blue fabric, arranged to face a state-of-the-art 36~ television branded with the HAVOC logo.",
	before [;
		Enter, Exit:
			"Lounging around in enemy territory puts not just your and the commander's lives at risk, but potentially the whole world if this mission isn't successful!";
		SwitchOff, SwitchOn:
			"The noise that would make would end your mission here and now.";
		Receive:
			"Many an agent has blown an undercover mission by forgetting to retrieve something left out in the open. Field Operations Manual rule 19 exists for a reason!";
	],
has switchable scenery supporter enterable;

Object leisure_items "leisure items" MessHall
with
	name
		'leisure' 'items' 'board' 'games' 'deck' 'cards' 'sente' '5200' 'game' 'machine',
	description
		"A selection of board games, decks of cards, and the latest Sente 5200 game machine.",
has scenery;

Object dining_scenery "dining furniture" MessHall
with
	name
		'dining' 'furniture' 'steel' 'folding' 'chair' 'chairs' 'long' 'table' 'tables',
	description
		"Two long tables aligned parallel in aft-fore rows form a bare-bones dining area. Steel folding chairs are arranged along both tables. 24 people are stationed here, if the chair count is any indication.",
	before [;
		Enter, Exit:
			"They look uninviting at best, a waste of your limited time here at worst.";
		Receive:
			"Many an agent has blown an undercover mission by forgetting to retrieve something left out in the open. Field Operations Manual rule 19 exists for a reason!";
	],
has scenery supporter enterable;

Object CorridorC "Corridor, Aft Module"
with
	description
		"Cramped and submarine-like, this is part of the main corridor that forms the ~spine~ of the facility. Exits lie fore and aft, and doors lie to port and starboard.",
	n_to
		CorridorB,
	s_to
		MessHall,
	e_to [;
		if (starboard_door hasnt general)
			<<Examine starboard_door>>;
		deadflag = 4;
		"Against your better judgment you slip into the barracks as quietly as possible. From behind, a throat clears to get your attention. It seems a restless soldier was standing just out of sight from the porthole window.";
	],
	w_to [;
		if (port_door hasnt general)
			<<Examine port_door>>;
		deadflag = 4;
		"Against your better judgment you slip into the barracks as quietly as possible. From behind, a throat clears to get your attention. It seems a restless soldier was standing just out of sight from the porthole window.";
	];

Object port_door "port door" CorridorC
with
	name
		'port' 'door' 'porthole' 'p//',
	description [;
		give port_door general;
		"Exercising an abundance of caution, you steal a glance through the porthole in the door to see what lies beyond. A dozen or so HAVOC personnel are barracked here. Best not to enter the hornet's nest.";
	],
	before [;
		Open:
			<<Go FAKE_W_OBJ>>;
	],
has openable scenery;

Object starboard_door "starboard door" CorridorC
with
	name
		'starboard' 'door' 'porthole' 'sb',
	description [;
		give starboard_door general;
		"You peek through the porthole window in the door. Inside are barracks, and maybe a dozen HAVOC personnel sleeping.";
	],
	before [;
		Open:
			<<Go FAKE_E_OBJ>>;
	],
has scenery openable;

Object CorridorB "Corridor B, Central Module"
with
	description
		"The central module's spacious, futuristic design is sandwiched between the industrial, cramped modules at aft and fore. Passageways lead into rooms to port and starboard.",
	before [;
		Search:
			"Embedded into the portal that connects this command module with the aft barracks is a series of evenly spaced, pale blue lights.";
	],
	n_to
		CorridorA,
	s_to [;
		if (parent(vial) == actor) {
			if (self hasnt general) {
				give self general;
				if (sensor_array hasnt general) {
					"Just as you're about to cross through, your Strike Force intuition kicks in. Something feels off.";
				} else {
					"Just as you're about to continue through, you recall the sensor array you inspected earlier. Is it safe to take lab materials across the threshold?";
				}
			} else {
				deadflag = 5;
				print "You choose to risk it, judging that you ";
				if (sensor_array hasnt general) {
					print "are just being paranoid. ";
				} else {
					print "have mis-identified the purpose of the blue lights. ";
				}
				print "But the lesson of second-guessing yourself in the field is quickly learned as the klaxon blares the instant you cross the portal threshold";
				if (sensor_array has general)
					print " with the vial";
				".";
			}
		}
		return CorridorC;
	],
	w_to 
		Security,
	e_to
		Operations;

Object sensor_array "LX sensor array" CorridorB
with
	name
		'pale' 'blue' 'light' 'lights' 'lx' 'sensor' 'array',
	description [;
		give self general;
		"Commander Raven knows systems like this better, but it might be an LX array. These detect when microchipped materials cross their threshold. Given the design incongruity and security features, it was likely intended to be connected directly to the foremost dome unit as an anti-theft measure.";
	],
has scenery;

Object corridor
with
	name
		'corridor' 'hall' 'hallway' 'passage' 'passageway',
	found_in
		CorridorC CorridorB CorridorA,
	before [;
		Examine:
			if (real_location == CorridorB)
				<<Search real_location>>;
			<<Examine real_location>>;
		Search:
			<<Search real_location>>;
	],
has scenery;

Object Security "Security Module"
with
	description
		"A high-tech bank of switches, knobs, lights, and monitors fills the port-side half of the aft wall, and a rack of firearms fills the rest. You find yourself wishing Commander Raven were here to make sense of this equipment. The only exit is starboard, back to the main corridor.",
	e_to
		CorridorB;

Object security_decorations "security decorations" Security
with
	name
		'switch' 'switches' 'light' 'lights' 'monitor' 'monitors' 'bank' 'knob' 'knobs',
	description
		"You're just a scientist, not a security expert. Raven or Deadbolt would know what all of this does.",
	before [;
		SwitchOn, SwitchOff:
			"Touching those without understanding them would trigger an alarm for sure.";
	],
has switchable scenery;

Object weapon_decorations "weapon decorations" Security
with
	name
		'firearms' 'firearm' 'weapon' 'weapons' 'aps' 'rifle' 'rifles' '.45' 'pistol' 'pistols' 'ammo' 'clips' 'clip' 'harpoon' 'gun' 'guns' 'arsenal',
	description
		"Like any fascist organization worth their salt, HAVOC is nothing if not paranoid. Even a couple of dozen scientists buried 1km under the sea are heavily armed. APS underwater assault rifles, .45 calibre pistols, ammo clips, and a couple of harpoon guns round out the arsenal.",
	react_before [;
		Shoot:
			"Discharging a weapon would be an incredibly foolish thing to do, as much as you want to destroy this facility and everything it stands for.";
	],
	before [;
		Take:
			"HAVOC is known to take full stock of all weapons and ammunition every morning before rollcall. A single item out of place would draw instant suspicion.";
	],
has scenery;

Object Operations "Communications and Operations Module"
with
	description
		"Tucked back into the starboard-most end of the module are pipes with gauges and valves, probably used to stabilize facility pressure as oceanic conditions shift.^^Closer to the port-side door is a communications module molded directly into the wall and floor. The only way out is where you came in, to port.",
	w_to
		CorridorB;

Object communications_decorations "communications decorations" Operations
with
	name
		'communications' 'module',
	description [;
		if (Lab has visited) {
			print "A modern, sleek, almost mod design, matching what you saw in the main research lab. ";
		} else {
			print "Incongruously modern compared to what you've seen of the facility so far. HAVOC probably stole this tech from someone else. ";
		}
		"The communications array has a sonar, a radio headset plugged into one of a bank of 1/4~ jacks, an array of tuning knobs, a desk-mounted microphone, and more.";
	],
	before [;
		SwitchOn, SwitchOff:
			"Turning on/off such equipment would force a reset which would be noticed in the morning.";
	],
has switchable scenery;

Object sonar "sonar" Operations
with
	name
		'sonar',
	description
		"The sonar shows nothing on screen, which means the stealth coating Strike Force technicians brewed up for your D.O.L.P.H.N units works as advertised."
has scenery;

Object operations_decorations "operations decorations" Operations
with
	name
		'pipe' 'pipes' 'gauge' 'gauges' 'valve' 'valves',
	description
		"If Fathom were here, he'd know what these are for. They look like they require deep sea expertise to utilize without flooding the whole place inadvertently",
	before [;
		Turn:
			"Manipulating these without understanding them could flood the entire operation. Strike Force would lose two top operatives, plus they'd still be in the dark about HAVOC's plans.";
	],
has scenery;
	

Object CorridorA "Corridor, Fore Module"
with
	description
		"The same industrial, submarine-like construction as you saw at the barracks module.The primary dome module sits just fore. Swinging doors lie port and starboard, and aft returns back to the central administrative module.",
	n_to
		Lab,
	s_to
		CorridorB,
	w_to 
		Showers,
	e_to
		Latrine;

Object Showers "Showers"
with
	description
		"A partitionless shower setup clad in stainless steel with showerheads along the aft wall, sinks with mirrors along the fore wall. Personal toiletries are stashed at the sinks, toothbrushes, razors, and the like. The floor is covered in a rubber mat with drainage holes.",
	e_to
		CorridorA;

Object shower_decorations "shower decorations" Showers
with
	name
		'showerhead' 'sink' 'mirror' 'toiletries' 'toothbrush' 'razor' 'rubber' 'mat' 'floor' 'flooring',
	description
		"A quick scan of the shower accoutrements reveals nothing to help with the mission, and taking anything from here could raise suspicions when HAVOC wakes up.",
has scenery;

Object Latrine "Latrine"
with
	description [;
		if (player notin stall) {
			print "A few stainless steel sinks with personal mirrors, standing urinals in stainless steel, and similarly uninviting stalls occupy the borders of the latrine. A moderately-sized porthole window on the starboard wall offers a view outside.";
			if (self hasnt visited)
				print "^^Faint movement in the water just outside the porthole catches your attention.";
			"";
		}
	],
	final_sequence
		0,
	safe_to_exit
		true,
	daemon [;
		self.final_sequence = self.final_sequence + 1;
		self.safe_to_exit = true;
		switch (self.final_sequence) {
			1:	self.safe_to_exit = false;
				"Suddenly, the door to the latrine slams open!";
			2: 	self.safe_to_exit = false;
				"Rushed, heavy footsteps approach your location.";
			3:	
				"The stall door next to you opens and shuts with a bang. You hear the lock being hurredly fidgeted into place.";
			4:
				"The occupied stall is quiet, then trousers fall to the floor around the occupant's ankles.";
			5:
				"The occupant yelps in sudden shock. ~Are heated toilet seats out of budget?~ he mutters to himself.";
			6:
				"A stack of HAVOC training manuals and other reading material are dropped to the floor by his feet.";
			7:
				"You hear a quiet sigh of relief.";
			default:
				switch (random(4)) {
					1: "You hear humming coming from the occupied stall.";
					2: "You hear the pages of reading material being flipped through.";
					3: "He drops what he was reading and picks up a different item from his stack.";
					4: "Just silence from the occupied stall.";
				}
		}
	],
	w_to [;
		if (self.final_sequence > 0) {
			StopDaemon(self);
			self.final_sequence = 0;
			self.safe_to_exit = true;
		}
		return CorridorA;
	];

Object latrine_window "latrine window" Latrine
with
	name
		'movement' 'latrine' 'starboard' 'porthole' 'window' 'outside',
	description [;
		print "Navigation lights along the starboard side of the facility illuminate the immediate surroundings near the latrine window.";
		if (toilet has general) {
			"^^You can see the specimen vial settling into the silt of the ocean bed. It should be easy to retrieve once you're back in the water.";
		}
		if (self hasnt general) {
			give self general;
			"^^In the green light you see a cloud of murky water dissipating and...Oh no, you wish you hadn't seen that. HAVOC is using the ocean as their personal septic tank. Is there any place on earth they haven't defiled with their presence?";
		}
	],
has scenery;

Object stall "stall" Latrine
with
	name
		'stall' 'stalls',
	description
		"Three stalls, currently unoccupied (thank goodness!), sit close to the starboard wall.",
	inside_description
		"A little cramped, but otherwise a pretty basic stall with a completely standard-issue toilet.",
	add_to_scope
		toilet,
	before [;
		Enter:
			if (self hasnt open) <Open self>;
			print "You choose the most starboard stall and enter.^";
			move player to self;
			update_moved = true;
			if (self has open) <Close self>;
			<<Look self>>;
		Exit:
			if (Latrine.safe_to_exit == false) {
				deadflag = 5;
				"A startled HAVOC soldier drops his reading material, assesses the situation, then screams, ~CODE BLACK! INTRUDER! SOUND THE ALARM!~";
			}
	],
has scenery openable open enterable;

Object toilet "toilet"
with
	name
		'toilet' 'commode',
	capacity
		1,
	description [;
		print "Stainless steel, utilitarian, looks cold. Appears to operate on a vacuum flush mechanism.";
		if (latrine_window has general)
			print " If what you saw outside the porthole window is any indication, it flushes directly out to the ocean";
		""; 
	],
	before [;
		Receive:
			if (noun hasnt small)
				"That would only clog and overflow the toilet.";
			if ((noun == vial) && (child(vial) == nothing))
				"The vial is small enough to fit, but the mission purpose for putting it in the toilet is unclear. Maybe there will be a reason to flush it later?";
		Flush:
			print "The toilet evacuates with a vacuum flush";
			if (child(self) ~= nothing) {
				print " draining ", (the)child(self), " away";
				if (child(self) == vial) {
					move ice to containment_unit;
					give self general;
					StartDaemon(Latrine);
				}
				remove child(self);
				update_moved = true;
			}
			". BA-WOOSH!";
	],
has static container openable;

Object Lab "Main Research Laboratory"
with
	description [;
		if (self hasnt general) {
			give self general;
			"You make your way into the primary domed unit of the facility, the research laboratory.^^
			The floor rises in concentric half-circle steps up to the elevated back half at the fore of the room. A deep workbench runs 180 degrees from port to starboard along the elevated aft wall, molded into the walls and floor. It is partitioned into separate workspaces, each devoted to a different scientific discipline.^^
			The circular room is designed to proudly show off the object at center: a glass cylinder that runs from floor to ceiling, filled with a dense mass of shimmering blue crystals. They seem charged with an internal energy.^^
			You have a crazy theory that you just can't shake. Has HAVOC successfully developed Ice-X?";
		}
		"A perfectly round room designed around a central core which holds a glass cylinder filled with blue crystals, likely Ice-X. The back(aft) half of the room has a supply cabinet. Concentric half-circle steps lead up to the fore half of the room which sports a 180 degree wraparound workbench divided into smaller workstations.";
	],
	s_to
		CorridorA;

Object main_console "laboratory workbench"
with
	name
		'lab' 'workstation' 'primary' 'main' 'workbench' 'console' 'bench',
	description [;
		print "The workbench is molded directly into the outer wall and floor as one piece and holds a bewildering array of scientific tools. You recognize most of the tools from your research with hyperice; there's nothing unique about them.^^Next to the port end of the workbench ";
		if (stepladder.next_to == main_console) {
			print "sits a rolling stepladder. ";
		} else {
			print "is an area designated for stepladder storage, outlined on the floor in yellow tape. ";
		}
		"At the starboard end is a large piece of advanced technology, possibly a cryoflux inducer.";
	],
	article
		"the",
	found_in
		Lab,
has static;

Object lab_scenery "lab scenery" Lab
with
	name
		'scientific' 'tools',
	description
		"Typical research equipment for working with ice structures, both natural and man-made. You have much of this equipment back at Strike Force headquarters; it's nothing remarkable on its own.",
has scenery;

Object cryoflux "cryoflux inducer" Lab
with
	name
		'cryoflux' 'inducer',
	description
		"If only you could get this machine out of HAVOC's lab and into your own! There are  theoretical ice structures that an inducer could coax out of even basic H20. Although the ~theoretical~ seems to have been made real here, judging from the central containment unit's contents.",
	before [;
		SwitchOn, SwitchOff:
			"There is no simple on/off switch for a machine this advanced. It would require intimate knowledge of its workings to activate its elaborate power cycling routine.";
	],
has switchable static;

Object containment_unit "large glass containment unit"
with
	name
		'large' 'glass' 'cylinder' 'containment' 'unit',
	found_in
		Lab,
	temperature
		BASE_UNIT_TEMPERATURE,
	capacity
		1,
	description
		"It dominates the center of the room, mounted on a metallic base, at some 2m in diameter and almost the entire 8m room height. It is filled with a dense mass of blue, shimmering, jewel-like crystals. A small access hatch with a warning label is built into the glass, just a bit out of reach. Mounted to the ceiling is an important looking digital readout.",
	before [;
		Open:
			<<Open hatch>>;
	],
	daemon [;
		self.temperature = self.temperature + TEMPERATURE_ADJUST;
		<Examine thermometer>;
		if (self.temperature >= FAILSAFE_TEMPERATURE) {
			deadflag = 4;
			"^The containment unit core temperature has risen above the failsafe threshold! An alarm pierces the silence as the unit is elevated to an iris hatch in the ceiling and ejected into the sea.";
		}
	],
	invent
		"a glass containment unit filled with sparkling blue crystals mounted on a thick base",
has transparent openable container static;

Object containment_base "metallic base" containment_unit
with
	name
		'metallic' 'base',
	description
		"A thick aluminum base that tapers slightly inward to meet the glass of the containment unit it supports. Numerous lights seem to monitor the unit's overall health. One large red button stands out.",
has transparent static;

Object hatch "access hatch" containment_unit
with
	name
		'access' 'hatch',
	article
		"an",
	description [;
		if (stepladder.next_to == containment_unit && player in stepladder) {
			print "Here on the stepladder is an easily accessible ";
		} else {
			print "A meter or so out of reach is a ";
		}
		"sliding hatch in the containment unit, trimmed with a silicone seal. There is no handle nor obvious locking mechanism. It must open electronically.";
	],
	before [;
		Open:
			"There is no obvious way to manipulate the access hatch.";
	];

Object warning_label "warning label" containment_unit
with
	name
		'warning' 'label' 'sign',
	description[;
		print "KEEP HATCH CLOSED AT ALL TIMES^";
		print "Specimen temperature fluctuations^";
		print "+- 10 degrees^";
		"will trigger containment unit jetison.";
	],
has static;

Object thermometer "digital readout" Lab
with
	name
		'digital' 'readout' 'thermometer',
	description [;
		print "The amber display reads:^";
		if (containment_unit.temperature >= FAILSAFE_TEMPERATURE) {
			"CRITICAL^FAILURE";
		} else {
			"CURRENT: ", containment_unit.temperature, "C^
			FAILSAFE: ", FAILSAFE_TEMPERATURE, "C";
		}
	],
has static ;


Object red_button "large red button" containment_base
with
	name
		'large' 'red' 'button',
	description
		"A large, red, translucent button lit from inside reads `HATCH` in white block lettering.",
	before [;
		SwitchOn, SwitchOff, Push:
			<<PushWith self second>>;
		PushWith:
			if (actor in stepladder) {
				if (second == tongs) {
					print "The tongs are just long enough to reach the button. ";
				} else {
					"Though you're closer to the hatch, you're further from the button. Presumably this would normally be a two-person procedure.";
				}
			}
			if (containment_unit hasnt open) {
				give containment_unit open;
				StartDaemon(containment_unit);
				"The access hatch at the top of the containment unit slides open with a hiss. The air instantly becomes noticably cooler.^";
			} else {
				give containment_unit ~open;
				StopDaemon(containment_unit);
				containment_unit.temperature = BASE_UNIT_TEMPERATURE;
				"The access hatch at the top of the containment unit slides closed with the sound of vacuum sealing. The environmental system quickly rewarms the room.";
			}
	],
has static;

Object gloves "heavily insultated gloves"
with
	name
		'heavily' 'insulated' 'glove' 'gloves',
	article
		"a pair of",
	description
		"These gloves are made of Cryon, a synthetic fiber that can withstand direct (brief!) contact with incredibly cold substances.",
has pluralname clothing;

Object tongs "tongs"
with
	name
		'long' 'tongs' 'tong' 'pincers',
	capacity
		1,
	description
		"Thin, stainless steel tongs about a meter long, designed to grab small objects. Likely used for taking Ice-X samples.",
	before [;
		Open:
			if (child(self)) {
				print "The tongs release, dropping ", (the)child(self), " to the ground.^";
				if (child(self) == ice) {
					print "It instantly evaporates in a small blue puff of steam.^";
					move ice to containment_unit;
				} else {
					move child(self) to real_location;
				}
				update_moved = true;
				rtrue;
			}
	],
	invent [;
		print "meter-long tongs";
		if (child(self)) print " which grip ", (an)child(self);
		rtrue;
	],
has pluralname container transparent;

Object vial "specimen vial"
with
	name
		'chipped' 'specimen' 'vial',
	description [;
		if (self in equipment_storage)
			print "A large quantity of specimen vials kept in a drawer labelled ~Chipped Vials~. ";
		"A small, overly-engineered thermos which should keep any specimen perfectly hot or cold for up to 12 hours. Appears to hold about one gram, a peanut-sized volume.";
	],
	before [;
		Open:
			if (ice in self)
				StartDaemon(ice);
		Close:
			if (ice in self)
				StopDaemon(ice);
				ice.melt_stage = 0;
	],
	invent [;
		print "an insulated specimen vial";
		if (self has open)
			if (child(self))
				print " (holding ", (the)child(self), ")";
		rtrue;
	]
has small openable container;

Object drawer "vial storage drawer" Lab
with
	name
		'drawer',
	description
		"It is labelled ~Chipped Vials~ and holds dozens of said vials.",
has scenery;

Object stepladder "small stepladder"
with
	name
		'small' 'utility' 'stepladder' 'ladder' 'stairs' 'staircase',
	found_in
		Lab,
	next_to
		main_console,
	description[;
		print "A 1-meter tall fiberglass stepladder on caster wheels sits beside ", (the)self.next_to;
		if (self.next_to == main_console)
			print ", within a rectangle on the floor, marked in yellow, vinyl tape";
		".";
	],
	before [;
		PushDir:
			if (selected_direction == s_to) 
				"Pushing it around outside the lab could draw unwanted attention and end the mission. It could be positioned alongside other items in the room.";
			"There's nowhere to go that direction, and pushing it around outside the lab could compromise the mission. The ladder could be positioned next to other things in the room.";
		Push:
			"Push it to where?";
		Transfer:
			if (actor in self)
				"You try to shimmy the ladder around, but just can't move it while standing on it.";
			if (second == self.next_to)
				"The ladder is already in position there.";
			if (second ~= main_console or equipment_storage or containment_unit or containment_base)
				"The ladder won't possibly be of any help near the ", (the) second, ".";
			self.next_to = second;
			print "The caster wheels try to disobey, but the stepladder is now positioned alongside ", (the) second;
			if (self.next_to == main_console)
				print ", back in its designated storage area marked on the floor like it had never left";
			".";
		Climb, Enter:
			if (actor in self) 
				"You're already standing on the stepladder.";
			move actor to self;
			update_moved = true;
			if (self.next_to == main_console)
				"There's not much to see from this vantage point, just the top of the laborary workstations, and there's nothing interesting there.";
			if (self.next_to == equipment_storage)
				"The top of the equipment storage locker is spotless and utterly dust free. HAVOC is nothing if not disciplined.";
			if (self.next_to == containment_unit or containment_base)
				"The stepladder provides just enough height to reach the access hatch of the containment unit.";
	],
	invent [;
		print "a rolling stepladder next to ", (the)self.next_to;
		rtrue;
	],
has static supporter enterable;

Object marking_tape "marking tape" Lab
with
	name
		'yellow' 'vinyl' 'marking' 'tape',
	description
		"Obviously added after the fact by the staff deployed here, it seems to mark an arbitrarily chosen storage area for the stepladder.",
has scenery;

Object ice "Ice-X" containment_unit
with
	name
		'azure' 'blue' 'crystal' 'crystals' 'ice' 'icex' 'ice-x' 'sample' 'fragile',
	article
		"the",
	melt_stage
		0,
	description 
		"Blue microcrystals of Ice-X which seem to shimmer and glow from an internal energy. Theoretically, they will be quite fragile if exposed to air for more than a few seconds.",
	before [;
		Listen:
			"Coinciding with the shimmer you hear what sounds like the tinkling of glass chimes.";
		Transfer:
			if (self in tongs) {
				give tongs open;
				<<Insert self second>>;
			}
		Insert:
			if (second ~= vial)
				"There's no safe way to put ", (the)self, " into ", (the)second, ".";
			if (vial hasnt open)
				"The vial is closed.";
			move ice to vial;
			update_moved = true;
			"Luckily, you have deep experience with similar crystaline substances and successfully transfer the fragile Ice-X to the vial.";
		Take:
			if (parent(gloves) == actor) {
				if (gloves has worn) {
					"The gloves offer some protection from cold, but not enough to grab ", (the)self, " by hand.";
				}
			}
			"Taking a sample of ", (the)self, " without any protection or tools would result in traumatic burns!";
		PickUp:
			if (actor notin stepladder) {
				if (second == tongs)
					"The tongs only barely reach the bottom edge of the access hatch.";
				"The access hatch is too high up to reach without assistance.";
			}
			if (stepladder.next_to ~= containment_unit) {
				"It's many meters between the containment unit and where you are at ", (the)stepladder.next_to, ". Maybe the stepladder could be moved closer?";
			}
			if (containment_unit hasnt open) {
				"The access hatch is closed, keeping the Ice-X cold and the room warm.";
			}
			if (gloves hasnt worn) {
				"Sticking a bare arm into the sub-arctic temperatures of the containment unit would bring the mission to an abrupt and painful end.";
			}
			if (second ~= tongs) {
				"Even with gloves, reaching directly into the containment unit would cause traumatic ice burns.";
			}

			move ice to tongs;
			update_moved = true;
			StartDaemon(ice);
			"The tongs worked well for the task of extracting a fragile crystal from the containment unit.^";
	],
	daemon [;
		if 	((parent(self) ~= containment_unit or vial) ||
		 	((parent(self) == vial) && (vial has open))) {
			self.melt_stage = self.melt_stage + 1;
		}

		if (self.melt_stage == FAILED_CRYSTAL_STAGE) {
			move self to containment_unit;
			self.melt_stage = 0;
			update_moved = true;
			print_ret (The)self, " quickly evaporates into a tiny wisp of pale blue steam from overexposure to the air.";
		}
	],
	invent [;
		print "a sample of Ice-X";
		if (self in tongs) print " (held by tongs)";
		rtrue;
	],
has small;

Object equipment_storage "equipment storage locker"
with
	name
		'equipment' 'storage' 'locker' 'cabinet' 'lock',
	article
		"an",
	found_in
		Lab,
	description
		"A steel locker with framed glass doors houses an assortment of disposable equipment for performing temperature-sensitive experiments.",
	with_key
		multitool,
	before [;
		Open:
			if (self hasnt locked) {
				print "Quite a bit of equipment here to search through; there's bound to be something useful.^";
				give self open;
				rtrue;
			}
		Search:
			if (self has open) {
				if (self hasnt general) {
					give self general;
					move gloves to self;
					move tongs to self;
					move vial to self;
					update_moved = true;
				}
				"Insultated gloves, tongs, specimen vials, and more.";
			}
		Receive:
			if (noun ~= gloves or tongs or vial)
				"There's no place to put ", (the)noun, " into the storage locker without it being obviously out of place.";

			if (noun == gloves) {
				print "You return the gloves back to their storage hook";
				if (ice in vial)
					print ", exactly as you found them";
				print ".";
			}
			if (noun == tongs) {
				print "The tongs are returned to their original storage spot";
				if (ice in vial)
					print ", like nothing happened";
				print ".";
			}
			if (noun == vial) {
				if (ice in vial)
					"With a sample of Ice-X in it, your infiltration would likely be recognized by HAVOC scientists in the morning.";
				print "You place the vial back into its drawer.";
			}
			move noun to self;
			update_moved = true;
			"";
	],
	invent
		"an equipment storage locker",
has container openable locked lockable;

Object dolphins "D.O.L.P.H.N. units"
with
	name
		'propulsion' 'unit' 'dolphn' 'dolphin',
	article
		"your team's",
	found_in
		Ocean,
	description 
		"Affectionately known as a 'dolphin' (D.O.L.P.H.N. : Deep Oceanic Lifeline and Propulsive Hydro-Navigator), this one-man propulsion unit developed by and for Strike Force has a tempered glass bullet-dome front with motorcycle-style handles for steering and throttle. It drags the rider through water much faster than swimming.",
	before [;
		Enter:
			"You've an internationally critical mission to perform before leaving, commander.";
	],
has enterable scenery;

Object magnetic_tether "magnetic tether"
with
	name
		'magnetic' 'tether',
	description
		"These magnetic tethers are the only thing keeping the D.O.L.P.H.N. units from being swept away by cross currents during the mission.",
has scenery;

Object outer_airlock_door "outer airlock door"
with
	name
		'outer' 'airlock' 'door',
	door_dir
		(n_to) (s_to),
	found_in
		Ocean Airlock,
	article
		"the",
	before [;
		Pull, Open:
			if (real_location == Ocean) {
				if (self has locked) "The handle is in the closed position.";
				if (pressure_gauge.pressure + pressure_gauge.adjustment ~= 0)
					"Though the door is unlocked, the pressure differential between the sea and the inner airlock is too great to open the door.";
				if (self has open) "The airlock door is already open.";
				give self open;
				print "The door swings open, ";
				if (green_wire hasnt general) {
					deadflag = 3;
					"triggering the alarm system!";
				}
				"silently and easily.";
			} else {
				"Raven gives you a stern look, ~Soldier, I'm not sure what you're thinking right now. Your mission lies inside the facility, not out there.~";
			}
		SimpleUnlock:
			"There's no lever, switch, or keyhole to make the unlocking of the airlock door so trivial. You'll need to bypass its electronic lock somehow.";
	],
	description [;
		if (real_location == Ocean) {
			if (self has open) {
				print "The airlock door is wide open. ";
			} else {
				print "Tightly fit into the bulkhead, the airlock door is engineered to enough precision to make it difficult to discern where the door ends and the hull of the facility begins. ";
			}
			print "^^A titanium panel to the left of the door is ";
			if (control_box has open) {
				print "floating in the water, attached to a control box by a bundle of colorful wires";
			} else {
				print "embedded into the steel hull";
			}
			" and a fist-sized dimple in the door houses a grippable handle.";
		} else {
			"A submarine-style airlock door with a large wheel embedded in the center that manually locks and unlocks it.";
		}
	],
has scenery door openable lockable locked;

Object airlock_wheel "airlock wheel" Airlock
with
	name
		'large' 'door' 'wheel',
	description
		"If the pressure is balanced, turning the wheel is enough to disengage the locks and open the door manually.",
	before [;
		Turn:
			<<Open outer_airlock_door>>;
		Push, Pull:
			"It's locked up tight. No amount of pushing or pulling will get it open.";
	],
has scenery;

Object inner_airlock_door "inner airlock door"
with
	name
		'inner' 'airlock' 'door',
	door_dir
		(n_to) (s_to),
	found_in
		Airlock Receiving,
	article
		"the",
	description [;
		if (self has open)
			"The inner airlock door is wide open.";

		"A bog-standard airlock door with a rotatable handle to unseal and open it into the main facility.";
	],
has scenery door openable;

Object inner_handle "inner airlock handle" Airlock
with
	name
		'handle',
	before [;
		Examine:
			<<Examine inner_airlock_door>>;
		Open, Turn, Push:
			<<Open inner_airlock_door>>;
		Pull, Close:
			<<Close inner_airlock_door>>;
	],
has scenery;

Object handle "door handle"
with
	name
		'inset' 'dimple' 'oblong' 'rotatable' 'handle',
	found_in
		Ocean,
	before [;
		Turn:
			if (red_wire.crossed == black_wire) {
				if (outer_airlock_door has locked) {
					give outer_airlock_door ~locked;
					"The handle rotates smoothly. The airlock door should be openable now.";
				} else {
					give outer_airlock_door locked;
					"The handle turns easily, resealing the airlock door.";
				}
			}
			"The handle absolutely refuses to budge.";
	],
	description 
		"An oblong handle with a grip sits inset and flush to the door's surface. It looks rotatable.",
has scenery;

Object ResearchFacility "HAVOC Research Facility"
with
	name
		'secret' 'havoc' 'research' 'facility' 'lab' 'base',
	found_in
		Ocean,
	description
		"When you approached the facility, you caught a decent look at its construction. Two immense cannisters in parallel, which are then connected to a wide shaft that runs like the spine of a great beast to a domed ~head~.^^6 shipping container-sized cannisters branch symmetrically from the spine, the ~ribs~ of the facility. It sits silently with minimal port and starboard navigation lights, and a lone white light illuminates the aft airlock door. Your propulsion units float tethered to the hull.",
has scenery;

Object bulkhead "bulkhead"
with
	name
		'bulkhead' 'hull' 'cannister' 'tube' 'corridor' 'dome' 'spine' 'ribs',
	article
		"the",
	found_in
		Ocean,
	description [;
		print "Sleek and sturdy, the stainless steel cannisters that comprise the bulkhead sit heavily on the silty ocean floor. The dome unit and the middle section of the corridor ~spine~ appeared to be newer than the rest of the modules";
		if (access_panel has general)
			print ".^^An access panel has been unscrewed from the main bulkhead and floats, tethered to the hull by a bundle of rainbow-colored wires.";
		".";
	],
has scenery transparent;

Object access_panel "titanium access panel" bulkhead
with
	name
		'hanging' 'dangling' 'titanium' 'access' 'panel' 'plate',
	add_to_scope
		screws control_box wire_bundle,
	description [;
		if (self hasnt general)
			"A flat square of metal with rounded corners, screwed into the surface of the facility's bulkhead with four stainless steel socket-headed screws.";
		"A flat square of metal with rounded corners, hanging from an inset control box by a colorful bundle of wires.";
	],
	before [;
		Remove, Open, Take:
			"It's screwed on tightly and won't budge.";
		Close:
			if (self has general)
				"You put the access panel back in place, but it just falls off again.";
			"The access panel is already screwed down in place.";
		Lock, Unlock, Turn, Screw:
			<<Screw screws>>;
	],
has static removable;

Object control_box "electrical control box" Ocean
with
	name
		'book-sized' 'inset' 'electrical' 'control' 'box' 'compartment',
	article
		"an",
	before [;
		Open:
			if (self has concealed)
				"The only way to open the control box would be by removing the access panel.";
			"It's already open, its access panel floating in the water, tethered by a bundle of wires.";
		Close:
			<<Close access_panel>>;
		Turn, Screw:
			"The control box itself doesn't contain any screws, though its access panel does.";
	],
	description [;
		if (self has concealed)
			"The control box is covered by its access panel which is screwed down to the bulkhead.";
		"A book-sized compartment in the hull of the facility, which houses a small gauge. A bundle of colored wires pours from it, connected to a dangling access panel.";
	],
	when_open
,
has static container openable concealed;

Object multitool "Strike Force multitool"
with
	name
		'tool' 'multitool' 'screwdriver' 'compass' 'knife' 'utility' 'torch' 'soldering' 'lockpick' 'data' 'storage' 'usb' 'pen' 'drive',
	before [;
		PutOn, Give, Drop:
			if (noun == self) "That's one of Strike Force's most important tools. In a Striker's capable hands it can overcome many of a mission's obstacles. Keep it on your person at all times!";
	],
	description [;
		print "A standard-issue Strike Force multitool for field operations. Can function as a (near) universal screwdriver, compass, utility knife, soldering torch, lockpick, and can store some 4 million bytes of data. Functions well in all environments";
		if (self in snowdrift)
			", even the frozen tundra of the Arctic.";
		if (self in raven)
			": land, sea, and air.";
	],
has shared;

Object screws "socket-headed screws"
with
	name
		'stainless' 'steel' 'socket' 'bolt' 'bolts' 'screw' 'screws',
	description
		"Four 5/16~ stainless steel screws with a hexagonal socket in the head.",
	before [ w;
		Take:
			if (access_panel hasnt general)
				"They're screwed down tightly, holding the access panel in place.";
			"They're captive screws, meaning they can be loosened and tightened, but a retaining flange prevents their outright removal.";
		Solder:
			"The multitool's soldering torch is far too weak to have any affect on the screws.";
		Remove, Turn, Screw:
			if (access_panel hasnt general) {
				if (verb_word == 'tighten' or 'close' or 'replace')
					"The screws are as tight as they can get.";
				give access_panel general;
				give control_box open;
				give control_box ~concealed;
				give wire_bundle ~concealed;
				objectloop (w ofclass Wire)
					give w ~concealed;
				"You loosen the captive screws with the multitool and the plate comes away from the hull, revealing a control box. The plate floats attached to the box by a colorful bundle of wires.";
			} else {
				if (verb_word == 'loosen' or 'open' or 'remove')
					"The access panel screws are already disengaged from the bulkhead.";
				give access_panel ~general;
				give control_box ~open;
				give control_box concealed;
				give wire_bundle concealed;
				objectloop (w ofclass Wire)
					give w concealed;
				"You tighten the captive screws, firmly reattaching the access panel to the control box, leaving no visible sign of tampering.";
			}
	],
has scenery removable;

Object wire_bundle "bundle of wires" control_box
with
	name
		'multicolored' 'mutihued' 'rainbow-colored' 'colorful' 'ribbon' 'bundle' 'cable' 'wires' 'rainbow',
	before [;
		Take, Remove: "Removing the cable outright would likely trigger a systems failure alarm. HAVOC forces would swarm you in seconds.";
	],
	description [w;
		if (self has concealed)
			"The wires are in the control box which is covered by an access panel which is screwed to the bulkhead.";
		if (self hasnt general) {
			give self general;
			print "A cable of 13 thick wires each a different color. You've hotwired enough security locks to know the red and black wires will unlock the door, if you reverse their polarity. The green wire needs care; a simple cut should disable the alarm.^^

			The multihued wires in light/dark pairs are trickier. Fathom, Strike Force's deep sea expert, taught you they balance airlock pressure against sea pressure, to allow the door to physically open. Cutting one will apply a pressure differential, as measured by the pressure gauge.^^";
		} else {
			print "A bundle of wires. Reversing polarity on the red and black will unlock the door, and cutting green should disable any alarm. Cutting any other will apply that wire's pressure differential to the airlock, as measured by the gauge.^^";
		}
		print "The current state of the wires:";
		objectloop (w ofclass Wire) {
			print "^    ", (string)w.short_name;
			if (w.pressure ~= 0) {
				print " (", w.pressure, " bars)";
			} else {
				if (w ~= green_wire) {
					print " (lock)";
				} else {
					print " (alarm)";
				}
			}
			print " : ";
			if (w.crossed) {
				print "crossed with ", (the)w.crossed;
			} else if (w has general) {
				print "severed";
			} else {
				print "intact";
			}
		}
		"";
	],
has static concealed;

!general means 'cut'
Class Wire
with
	name
		'wire',
	article
		"the",
	pressure !default to 0, where 0 means neutral
		0,
	crossed
		nothing,
	before [;
		Cut:
			if (self has general) "That wire is already cut.";
			if (self.crossed ~= nothing) {
				give self.crossed general;
				self.crossed.crossed = nothing;
				self.crossed = nothing;
			}
			give self general;
			print "With swift, practiced care, ", (the)self, " wire is snipped cleanly. ";
			CalculatePressure();
			"";
	],
	description [;
		if (self has concealed)
			print_ret (The)self, " wire is part of a larger bundle of wires which is secured in the control box behind the access panel.";
		print (The)self, " wire which controls ", self.pressure, " bars of pressure is currently ";
		if (self has general) {
			print "severed";
		} else {
			if (self.crossed ~= nothing) {
				print "cross-connected to ", (the)self.crossed;
			} else {
				print "intact";
			}
		}
		".";
	],
has static concealed;

Wire red_wire "red wire" control_box
with	name 'red',
		short_name "red";

Wire black_wire "black wire" control_box
with	name 'black',
		short_name "black";

Wire green_wire "green wire" control_box
with	name 'green',
		short_name "green";

Wire light_pink_wire "light pink wire" control_box
with	name 'light' 'pink',
		short_name "light pink",
		pressure -5;

Wire dark_pink_wire "dark pink wire" control_box
with	name 'dark' 'pink',
		short_name "dark pink",
		pressure 5;

Wire light_turquoise_wire "light turquoise wire" control_box
with	name 'light' 'turquoise',
		short_name "light turquoise",
		pressure -10;

Wire dark_turquoise_wire  "dark turquoise wire" control_box
with	name 'dark' 'turquoise',
		short_name "dark turquoise",
		pressure 10;

Wire light_orange_wire "light orange wire" control_box
with	name 'light' 'orange',
		short_name "light orange",
		pressure -30;

Wire dark_orange_wire "dark orange wire" control_box
with	name 'dark' 'orange',
		short_name "dark orange",
		pressure 30;

Wire light_purple_wire "light purple wire" control_box
with	name 'light' 'purple',
		short_name "light purple",
		pressure -50;

Wire dark_purple_wire "dark purple wire" control_box
with	name 'dark' 'purple',
		short_name "dark purple",
		pressure 50;

Wire light_grey_wire "light grey wire" control_box
with	name 'light' 'grey',
		short_name "light grey",
		pressure -100;

Wire dark_grey_wire "dark grey wire" control_box
with	name 'dark' 'grey',
		short_name "dark grey",
		pressure 100;

[ CalculatePressure w safe old_adj new_adj;
	old_adj = pressure_gauge.adjustment;
	new_adj = 0;
	safe = true;
	objectloop (w ofclass Wire) {
		if (w.pressure ~= 0) {
			if (w.crossed ~= nothing) {
				safe = false;
				if (pressure_gauge.danger == false) {
					pressure_gauge.danger = true;
				}
			} else if (w has general) {
				new_adj = new_adj + w.pressure;
			}
		}
	}
	pressure_gauge.adjustment = new_adj;
	if (safe) {
		if (pressure_gauge.danger == true) {
			print " The needle settles down into a steady reading again.";
		} else {
			if (old_adj ~= new_adj) {
				print " The needle on the pressure gauge adjusts itself in accordance with the wire manipulation.";
			}
		}
		pressure_gauge.danger = false;
	} else {
		print " The needle on the attached gauge jumps around wildly!";
	}
];

Object pressure_gauge "pressure gauge" control_box
	with
		name
			'pressure' 'gauge',
		pressure
			125,
		adjustment
			0,
		danger
			false,
		description [;
			if (self.danger) {
				"The pressure needle is jumping around wildly; there must be a crossed pressure wire! You've go to get this sorted out and fast!";
			} else {
				if (self hasnt general) {
					give self general;
					print "A small, round pressure gauge with demarcations ranging from -500, to 0 at the top, to +500 bars. ";
				}
				print "The gauge reads ";
				print (self.pressure + self.adjustment), " bars. ";
				if (self.pressure + self.adjustment == 0) {
					"^^The pressure is equalized. Assuming security measures have been circumvented, the airlock door should open without trouble.";
				} else {
					"^^The airlock door will be impossible to open until the pressure is equalized.";
				}
			}
		],
has static;

Class Striker
with 	add_to_scope 
			multitool,
has proper animate;

Striker raven "Raven"
with	name
			'self' 'me' 'myself',
		short_name
			'yourself',
		description
			"Strike Force field commander, security and information specialist. An early recruit and founding member of Strike Force. Black belt in various forms of martial arts and a fine jazz saxophonist, if you do say so yourself.",
has female concealed;

Striker fake_raven "Raven"
with	name
			'raven' 'commander',
		short_name
			"Raven",
		description 
			"Strike Force field commander, security and information specialist. An early recruit and founding member of Strike Force. Without the commander's good word, I wouldn't have been made a Striker. I owe her my career and trust her with my life",
		life [;
			Ask:
				switch(second) {
					'mission': 
						"~I repeat, we get in, get some kind of evidence of HAVOC's plan, and get out. We leave no sign we were here.~";
					'strike', 'force':
						"~The only defensive line between HAVOC and peace.~";
					'havoc':
						"~I've been fighting them for years now and I will get my revenge for what they did to Piledriver and Blastoff.~";
					'piledrive', 'blastoff':
						"~A story for another time,~ she whispers.";
					default:
						switch(random(3)) {
							1: "~Keep the chit-chat down until we've completed our mission,~ she orders.";

							2: "She places a hand on your shoulder, ~Snowdrift, I need you to trust in your own ability to get the job done. I'm only here to get you in and out.~";

							3: "~Whatever HAVOC is up to here is well outside my wheelhouse. It's your show now. Make the team proud,~ she says.";
					}
				}
		],
		orders [;
			default:
				"~It's your show now, I'm here in case things go south,~ she says. ~So, keep the chatter down and focus on the job. I'd like to get out of here ASAP.~";
		],
has female animate;

Striker fake_snowdrift "Snowdrift"
with
	name
		'snow' 'snowdrift',
	short_name
		"Snowdrift",
	description 
		"Strike Force's Arctic specialist, expert on all things ice and snow. You personally recommended he be allowed to join Strike Force seeing in him the intrepid spirit that drives all Strikers in the fight against HAVOC.",
	life [;
		Ask:
			switch (second) {
				'strike', 'force':
					"~The world's best experts in every discipline. Together we can stop HAVOC every time.~";
				'havoc':
					"~As much as I love being a Strike Force member, I'd give it up if it meant HAVOC was gone.~";
				'piledrive', 'blastoff':
					"~That was before my time. I've only heard mixed rumors,~ he says.";
				default:
					"~Commander, I appreciate you trying to involve me with such matters but our time is short. I'll be happy to train with you on whatever you think best back at home base,~ he says.";
			}
	],
	orders [;
		default:
			"Snowdrift demures, ~I'm only here as the field expert on HAVOC's research, commander. I need your expertise to get into the facility before I can be of any real use.~";
	],
has animate;

Striker snowdrift "Snowdrift"
with
	name
		'self' 'me' 'myself',
	short_name
		'yourself',
	description 
		"Strike Force's Arctic specialist, expert on all things ice and snow. In my free time I enjoy getting away on a quiet beach and am an avid reader. Joined Strike Force 2 years ago; anniversary is actually in just a couple of days.",
has concealed;

[ SimpleUnlockSub;
	"HAVOC has been known to make very dumb mistakes before, but in general their security is tight enough to require a lockpick at minimum.";
];

Extend 'unlock'
	* noun -> SimpleUnlock;

[ ScrewSub;
	if (second){
		if (second ~= multitool) {
		"You use every skill in your considerable training to manipulate ", (the) noun, " with ", (the) second, " but it's just not possible without tool assistance.";
		}
	}
];

Extend 'turn'
	* noun 'with'/'using' noun -> Screw;
Extend 'remove' first
	* removable -> Remove
	* noun 'with'/'using' noun -> Screw;
Verb 'replace' 'loosen' 'tighten'
	* noun -> Screw
	* noun 'with'/'using' noun -> Screw;

[ AttachOrTieSub; 
	if (~~(noun ofclass Wire && second ofclass Wire))
		<<Tie noun second>>;
	"Wires can be attached to other wires, but need a solid connection to be effective.";
];

[ AttachClarifySub;
	"Your Strike Force multitool has many functions. You'll need to be more specific about which function should be used to attach those things together.";
];

[ AttachSub;
	if (noun ofclass Wire && second ofclass Wire) {
		<<Solder noun second>>;
	}
	"There's no clear way to attach ", (the)noun, " to ", (the)second, ".";
];

Verb 'connect' = 'attach';
Verb 'reattach' = 'attach';
Extend 'attach' first
	* noun 'to' noun -> AttachOrTie
	* noun 'to' noun 'with'/'using'/'by' 'tool'/'multitool' -> AttachClarify
	* noun 'to' noun 'with'/'using'/'by' 'torch' -> Attach
	* noun 'to' noun 'with'/'using'/'by' 'soldering' 'multitool'/'tool'/'iron'/'torch' -> Attach;


[ SolderClarifySub;
	<<Solder noun noun>>;
];

[ SolderSub; 
	if ((noun ofclass Striker) || (second ofclass Striker))
		"Soldering soldiers suffers soldierly sneers.";
	if (~~(noun ofclass Wire) || ~~(second ofclass Wire))
		"The soldering component of the multitool is really only strong enough for light tasks, like reconnecting wires.";
	if ((noun ofclass Wire) && (second ofclass Wire)) {
		if ((noun hasnt general) || (second hasnt general))
			"Only cut wires can be soldered together.";
	} else {
		"The multitool's soldering torch is relatively weak, really only effective for wires. At any rate, soldering random objects together will only give HAVOC evidence of your incursion.";
	}
	if (noun == second) {
		give noun ~general;
		noun.crossed = nothing;
		print (The)noun, " is fused back into one wire.";
		CalculatePressure();
		"";
	}
	if (noun ~= second) {
		if (green_wire == noun or second) {
			deadflag = 3;
			"Years of field expertise scream at you to leave the green wire alone. Nevertheless you push forward with your questionable plan to tamper further with its voltage.";
		}
		noun.crossed = second;
		second.crossed = noun;
		give noun ~general;
		give second ~general;
		print (The)noun, " and ", (the)second, " are now cross-fused.";
		CalculatePressure();
		"";
	}
	"UNEXPECTED: Some edge case fell through to here!";
];

Verb 'solder' 'fuse'
	* noun 'to'/'and'/'with' 'self'/'itself' -> SolderClarify
	* noun -> Solder
	* noun 'to'/'and'/'with' noun -> Solder
	* noun 'to'/'and'/'with' noun 'with'/'using'/'by' 'torch'/'tool'/'soldering'/'multitool' -> Solder
	* noun 'to'/'and'/'with' noun 'with'/'using'/'by' 'soldering' 'multitool'/'tool'/'torch'/'iron' -> Solder
	* noun 'with'/'using'/'by' 'torch'/'tool'/'multitool' 'to' noun -> Solder
	* noun 'with'/'using'/'by' 'soldering' 'iron'/'tool'/'torch'/'multitool' 'to' noun -> Solder;

[ DirectionPromptSub;
	"Something at the research facility is causing your multitool compass to behave erratically. You'll need to use nautical terms on this mission: fore (f), aft (a), port (p), and starboard (sb).";
];

Verb 'n//' 'north' 's//' 'south' 'e//' 'east' 'w//' 'west' 'nw' 'northwest' 'ne' 'northeast' 'sw' 'southwest' 'se' 'southeast'
	* -> DirectionPrompt;

[ UseExplainSub;
	"Being a member of the elite Strike Force, precision of words is as important as precision of actions. (try to come up with a more specific verb to apply to the situation)";
];

Verb 'use' 'utilize'
	* noun -> UseExplain
	* noun 'on'/'with' noun -> UseExplain;

Verb 'describe' = 'examine';

[ HelpSub;
	"Raven and Snowdrift are on their own; there's no additional help on the way.";
];

Verb 'help'
	* -> Help;

[ LockPickSub;
	if (noun ofclass Striker)
		"Out of the box thinking is good field work, but this is a little too far afield. Try picking a lock?";
	if (noun hasnt lockable)
		print_ret (The)noun, " isn't pickable.";
	if (second && second ~= multitool)
		print_ret (The) second, " isn't up to the task of picking the lock of ", (the)noun, ".";
	if (noun hasnt locked)
		<<Lock noun second>>;
	<<Unlock noun second>>;
];

[ PickUpSub;
	if (second ~= tongs)
		print_ret (The) second, " isn't designed grabbing or picking things up.";
	if (noun hasnt small)
		print_ret (The) noun, " is too big for the tongs to get a grip on.";
	if (noun in tongs) 
		"That's already being held by the tongs.";
	move noun to tongs;
	update_moved = true;
	"The tongs prove well-suited to grasping small things like ", (the)noun, ".";
];

Verb 'grab' = 'take';

Extend 'pick' last
	* noun -> LockPick
	* 'up' noun -> Take
	* noun 'with'/'using' noun -> LockPick
	* 'open' noun 'with'/'using' noun -> LockPick
	* 'up' noun 'with'/'using' noun -> PickUp;

Extend 'take' last
	* noun 'with'/'using' noun -> PickUp;

[ PushWithSub;
	if (second ~= tongs) print_ret (The)second, " isn't suited to the task of pushing things around.";
];

Verb 'position' = 'push';
Verb 'reposition' = 'push';
Verb 'roll' = 'push';
Extend 'push' last
	* noun 'with'/'using' noun -> PushWith
	* noun 'next'/'adjacent'/'over' 'to'/'near' noun -> Transfer
	* noun 'beside'/'alongside'/'near' noun -> Transfer;


Extend 'look' last
	* 'out'/'outside' noun -> Examine
	* 'under'/'behind' noun -> Search;

[ DescendSub; 
	if ((noun == stepladder) || (actor in stepladder)) <<Exit noun>>;
	"There's nowhere to descend when standing on the floor.";
];

Verb 'descend'
	* -> Descend
	* noun -> Descend;

[ FlushSub;
	if (noun ~= toilet) {
		<Insert noun toilet>;
		<<Flush toilet>>;
	}
];

Verb 'flush'
	* noun -> Flush;

[ SearchLocationSub;
	<<Search real_location>>;
];

Extend 'search' first
	* -> SearchLocation
	* 'in'/'on'/'under'/'behind'/'inside' noun -> Search;

Verb 'cross' 'reverse'
	* noun 'with'/'and' noun -> AttachOrTie;

[ ShootSub;
	"There is no firearm nearby to fire. Even if there were, you'd jeopardize not just the mission but your and Raven's lives!";
];

Verb 'shoot' 'fire'
	* -> Shoot
	* noun -> Shoot;

[ XyzzySub; 
	print (italic)"Strike Force continues after these messages!^^";

	switch(random(2)) {
		1:
			print "Hi, I'm Tom Selick from NBBC's ~Jaguar P.I.~ and I'd like to speak to you today about term life insurance. Many people talk a lot about preparing for the unexpected, but never actually take the time to sit down and do something about it.^^In fact, you might be one of those very people. If so, I urge you to call the good people at McMasters Brothers today. A free consultation over the phone means you can start arranging for your family's future from the comfort of your very own home. No hassles, no traffic to fight, just peace of mind. Call now at 1-800-555-3673.";
		2:
			print "You are the final starfighter, earth's last hope for survival against an alien invasion! Blast your way through waves of enemies, collect fuel, destroy the defensive shield, and detonate the Kildaxian Central Core! Can you save earth and get the highest score? Play ~Galactic Onslaught~, available now for the Sente 5200.";
	}

	print_ret (italic)"^^We now return to Strike Force!";
];
Verb 'xyzzy' * -> Xyzzy;

[Initialise;
	ship_directions_enabled = true;
	normal_directions_enabled = false;

	move multitool to player;
	move fake_snowdrift to location;

	! this section tests the outcome
	! give control_box open;
	! stepladder.next_to = containment_unit;
	! move tongs to player;
	! move gloves to player;
	! move vial to player;
	! move ice to tongs;
	! move vial to player;
	! give vial open;
	give outer_airlock_door open;

	update_moved = true;
	
	PreviouslyOn();
	Introduction();
];